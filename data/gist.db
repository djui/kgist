{"key":"6572","val":{"description":"","filename":"gistfile1.sh","language":"Bash","code":"test","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nb\">test</span>\n</pre></div>\n","ctime":1304607835000,"id":"6572","archived":true}}
{"key":"6753","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"testefw","author":"uwe","irc":"#tech","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">testefw</span>\n</pre></div>\n","ctime":1304440523000,"id":"6753","archived":true}}
{"key":"5434","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"uwe","irc":"#tech","expires":"1h","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304440122000,"id":"5434","archived":true}}
{"key":"8765","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"foldf(State, Fs) ->\r\n    lists:foldr(fun(F,Acc) -> F(Acc) end, State, Fs).","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"nf\">foldf</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-2\"></a>    <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304454921000,"id":"8765","archived":true}}
{"key":"2342","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"","irc":"","expires":"1h","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304438986000,"id":"2342","archived":true}}
{"key":"6574","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"uwe","irc":"#tech","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304440444000,"id":"6574","archived":true}}
{"key":"8653","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304434275661,"id":"8653","archived":true}}
{"key":"2346","val":{"description":"second snippet","filename":"cool snippet!","language":"Erlang","code":"test","author":"uwe","irc":"","expires":"1h","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304435003475,"id":"2346","archived":true}}
{"key":"8711","val":{"description":"","filename":"gistfile1.sh","language":"Bash","code":"test","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nb\">test</span>\n</pre></div>\n","ctime":1304607904000,"id":"8711","archived":true}}
{"key":"1789","val":{"description":"Multi char linenumber test","filename":"index.html","language":"HTML","code":"<html>\r\n<head>\r\n<title>test</title>\r\n</head>\r\n\r\n<body>\r\n  <div>\r\n    <p>test</p>\r\n  </div>\r\n</body>\r\n</html>","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"nt\">&lt;html&gt;</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> <span class=\"nt\">&lt;head&gt;</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"nt\">&lt;title&gt;</span>test<span class=\"nt\">&lt;/title&gt;</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> <span class=\"nt\">&lt;/head&gt;</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> \n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span> <span class=\"nt\">&lt;body&gt;</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>   <span class=\"nt\">&lt;div&gt;</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>     <span class=\"nt\">&lt;p&gt;</span>test<span class=\"nt\">&lt;/p&gt;</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span>   <span class=\"nt\">&lt;/div&gt;</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span> <span class=\"nt\">&lt;/body&gt;</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span> <span class=\"nt\">&lt;/html&gt;</span>\n</pre></div>\n","ctime":1304536959000,"id":"1789"}}
{"key":"7642","val":{"description":"OMGZ IM  ON TEH INNURWEBZ","filename":"gistfile1.erl","language":"Erlang","code":"foo(bar) -> baz.\r\n","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">baz</span><span class=\"p\">.</span>\n</pre></div>\n","ctime":1304489368000,"id":"7642","archived":true}}
{"key":"1839","val":{"description":"now with line numbers","filename":"final_linum_test.erl","language":"Erlang","code":"foldf(State, Fs) ->\r\n    lists:foldr(fun(F,Acc) -> F(Acc) end, State, Fs).","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nf\">foldf</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span>     <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304457145000,"id":"1839"}}
{"key":"3893","val":{"description":"JAVA sucks","filename":"javasucks.java","language":"Java","code":"public static void main(String[] args) {\r\n    System.out.println(\"This is all the code needed to create a function that prints a silly message. Not verbose at all :D\");\r\n}\r\n","author":"oracle","irc":"#tech","expires":"1d","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span>     <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;This is all the code needed to create a function that prints a silly message. Not verbose at all :D&quot;</span><span class=\"o\">);</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">3</span> <span class=\"o\">}</span>\n</pre></div>\n","ctime":1304607175000,"id":"3893"}}
{"key":"1350","val":{"description":"linum test","filename":"gistfile1.erl","language":"Erlang","code":"foldf(State, Fs) ->\r\n    lists:foldr(fun(F,Acc) -> F(Acc) end, State, Fs).","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"nf\">foldf</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-2\"></a>    <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304454786000,"id":"1350","archived":true}}
{"key":"8548","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"n\">test</span>\n</pre></div>\n","ctime":1304538250000,"id":"8548","archived":true}}
{"key":"6554","val":{"description":"Rook - web server for R","filename":"json_server.r","language":"S","code":"library(\"Rook\")\r\nserver <- Rhttpd$new()\r\noptions('Rhttpd_debug'=0)\r\nserver$start(listen='10.17.105.48',port='8081',quiet=FALSE)\r\napp <- setRefClass('Hist',\r\n                   methods = list(\r\n                     call = function(env){\r\n                       req <- Rook::Request$new(env)\r\n                       callback <- req$GET()[['callback']]\r\n                       x <- as.integer(req$GET()[['x']])\r\n                       y <- as.integer(req$GET()[['y']])\r\n                       data1 <- load1(x,y)\r\n                       list(status=200,\r\n                            headers = list('Content-Type' = 'application/json'),\r\n                            body = paste(callback,\"(\",data1,\")\",sep=\"\")\r\n                            )\r\n                     }\r\n                     )\r\n                   )$new()\r\nserver$add(app,name='respashist')\r\n","author":"Westin","irc":"","expires":"1d","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> library<span class=\"p\">(</span><span class=\"s\">&quot;Rook&quot;</span><span class=\"p\">)</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> server <span class=\"o\">&lt;-</span> Rhttpd<span class=\"p\">$</span>new<span class=\"p\">()</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> options<span class=\"p\">(</span><span class=\"s\">&#39;Rhttpd_debug&#39;</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> server<span class=\"p\">$</span>start<span class=\"p\">(</span>listen<span class=\"o\">=</span><span class=\"s\">&#39;10.17.105.48&#39;</span><span class=\"p\">,</span>port<span class=\"o\">=</span><span class=\"s\">&#39;8081&#39;</span><span class=\"p\">,</span>quiet<span class=\"o\">=</span><span class=\"kc\">FALSE</span><span class=\"p\">)</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> app <span class=\"o\">&lt;-</span> setRefClass<span class=\"p\">(</span><span class=\"s\">&#39;Hist&#39;</span><span class=\"p\">,</span>\n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span>                    methods <span class=\"o\">=</span> list<span class=\"p\">(</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>                      call <span class=\"o\">=</span> <span class=\"kr\">function</span><span class=\"p\">(</span>env<span class=\"p\">){</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>                        req <span class=\"o\">&lt;-</span> Rook<span class=\"p\">::</span>Request<span class=\"p\">$</span>new<span class=\"p\">(</span>env<span class=\"p\">)</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span>                        callback <span class=\"o\">&lt;-</span> req<span class=\"p\">$</span>GET<span class=\"p\">()[[</span><span class=\"s\">&#39;callback&#39;</span><span class=\"p\">]]</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span>                        x <span class=\"o\">&lt;-</span> as.integer<span class=\"p\">(</span>req<span class=\"p\">$</span>GET<span class=\"p\">()[[</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">]])</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span>                        y <span class=\"o\">&lt;-</span> as.integer<span class=\"p\">(</span>req<span class=\"p\">$</span>GET<span class=\"p\">()[[</span><span class=\"s\">&#39;y&#39;</span><span class=\"p\">]])</span>\n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span>                        data1 <span class=\"o\">&lt;-</span> load1<span class=\"p\">(</span>x<span class=\"p\">,</span>y<span class=\"p\">)</span>\n<a name=\"linum-13\"></a><span class=\"lineno\">13</span>                        list<span class=\"p\">(</span>status<span class=\"o\">=</span><span class=\"m\">200</span><span class=\"p\">,</span>\n<a name=\"linum-14\"></a><span class=\"lineno special\">14</span>                             headers <span class=\"o\">=</span> list<span class=\"p\">(</span><span class=\"s\">&#39;Content-Type&#39;</span> <span class=\"o\">=</span> <span class=\"s\">&#39;application/json&#39;</span><span class=\"p\">),</span>\n<a name=\"linum-15\"></a><span class=\"lineno\">15</span>                             body <span class=\"o\">=</span> paste<span class=\"p\">(</span>callback<span class=\"p\">,</span><span class=\"s\">&quot;(&quot;</span><span class=\"p\">,</span>data1<span class=\"p\">,</span><span class=\"s\">&quot;)&quot;</span><span class=\"p\">,</span>sep<span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\">16</span>                             <span class=\"p\">)</span>\n<a name=\"linum-17\"></a><span class=\"lineno\">17</span>                      <span class=\"p\">}</span>\n<a name=\"linum-18\"></a><span class=\"lineno special\">18</span>                      <span class=\"p\">)</span>\n<a name=\"linum-19\"></a><span class=\"lineno\">19</span>                    <span class=\"p\">)$</span>new<span class=\"p\">()</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\">20</span> server<span class=\"p\">$</span>add<span class=\"p\">(</span>app<span class=\"p\">,</span>name<span class=\"o\">=</span><span class=\"s\">&#39;respashist&#39;</span><span class=\"p\">)</span>\n</pre></div>\n","ctime":1304610277000,"id":"6554"}}
{"key":"5409","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304438973000,"id":"5409","archived":true}}
{"key":"5043","val":{"description":"","filename":"gistfile1.erl","language":"Bash","code":"teetwtwe","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> teetwtwe\n</pre></div>\n","ctime":1304599555000,"id":"5043","archived":true}}
{"key":"5414","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"test","author":"uwe","irc":"#tech","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"n\">test</span>\n</pre></div>\n","ctime":1304441035000,"id":"5414","archived":true}}
{"key":"7865","val":{"description":"line number test","filename":"ln.erl","language":"Erlang","code":"foldf(State, Fs) ->\r\n    lists:foldr(fun(F,Acc) -> F(Acc) end, State, Fs).","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"nf\">foldf</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304454549000,"id":"7865","archived":true}}
{"key":"4639","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"foldf(State, Fs) ->\r\n    lists:foldr(fun(F,Acc) -> F(Acc) end, State, Fs).\r\n","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"nf\">foldf</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-2\"></a>    <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304455387000,"id":"4639","archived":true}}
{"key":"4642","val":{"description":"Simple erlang module","filename":"gistfile1.erl","language":"Erlang","code":"-module(test).","author":"uwe","irc":"#tech","expires":"","hl_code":"<div class=\"highlight\"><pre><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304426362485,"id":"4642","archived":true}}
{"key":"9643","val":{"description":"","filename":"gistfile1.erl","language":"Erlang","code":"te","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"n\">te</span>\n</pre></div>\n","ctime":1304538594000,"id":"9643","archived":true}}
{"key":"5404","val":{"description":"","filename":"ctime_test.sh","language":"Bash","code":"#!/bin/bash\r\n\r\necho test","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"c\">#!/bin/bash</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span> \n<a name=\"linum-3\"></a><span class=\"lineno\">3</span> <span class=\"nb\">echo test</span>\n</pre></div>\n","ctime":1304618296792,"id":"5404"}}
{"key":"3720","val":{"description":"Tests the libgit2 wrapper for Node.js","filename":"git_test.js","language":"JavaScript","code":"/**\r\n * This example will open the Gitteh Git repo and walk the entire revision\r\n * history, displaying a screen output fairly similar to what you'd get when you\r\n * run `git log`.\r\n */\r\nvar gitteh = require(\"gitteh\"),\r\n    path = require(\"path\"),\r\n    fs = require(\"fs\");\r\n \r\nvar startTime = Date.now();\r\n \r\n// Load up the node-gitteh repository. This will only work if you cloned the \r\n// repo of course.\r\n// You can point this to anywhere that is housing a git repo, even a bare one.\r\n// You have to point it to the GIT directory though, so if you're working with\r\n// a repo that has a working copy checked out, you need to point it to the .git\r\n// folder.\r\nvar repository = gitteh.openRepository(path.join(__dirname, \"..\", \".git\"));\r\n \r\n// First step is to grab the HEAD commit. We use the ref management features of\r\n// gitteh to achieve this.\r\nvar headRef = repository.getReference(\"HEAD\");\r\n \r\n// Just in case the reference is pointing to another reference (symbolic link),\r\n// we \"resolve\" the reference to a direct reference (one that points to an OID).\r\n// If the ref being pointed to by HEAD is already direct, then resolve does \r\n// nothing but return the same reference.\r\nheadRef = headRef.resolve();\r\n \r\n// Let's create a revision walker and traverse the entire commit history.\r\nvar walker = repository.createWalker();\r\n \r\n// Let's push the head commit onto the revision walker and start walkin'!\r\n \r\n// This will sort our commits by time. They can also be sorted \"topologically\",\r\n// which will prioritize parents before children. Also SORT_REVERSE can be\r\n// added to sorting, which will reverse all sorting options chosen.\r\n \r\n// This will start from the most recent commit, and go back in time.\r\n// Note that you have to set sorting BEFORE you push a commit to traverse from.\r\nwalker.sort(gitteh.GIT_SORT_TIME);\r\nwalker.push(headRef.target);\r\n \r\n// This output basically mimicks a basic `git log` command.\r\nvar commit;\r\nwhile(commit = walker.next()) {\r\n    console.log(\"commit \" + commit.id);\r\n \r\n    console.log(\"Author: \" + commit.author.name + \" <\" + \r\n            commit.author.email + \">\");\r\n     \r\n    if((commit.committer.name != commit.author.name) || \r\n            (commit.committer.email != commit.author.email)) {\r\n        console.log(\"Committer: \" + commit.committer.name + \" <\" + \r\n                commit.committer.email + \">\");\r\n    }\r\n \r\n    console.log(\"Date: \" + commit.committer.time.toUTCString());\r\n     \r\n    console.log(\"\\n    \" + commit.message + \"\\n\");\r\n}\r\n \r\nconsole.log((Date.now() - startTime) + \"ms\");","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"cm\">/**</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> <span class=\"cm\"> * This example will open the Gitteh Git repo and walk the entire revision</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"cm\"> * history, displaying a screen output fairly similar to what you&#39;d get when you</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> <span class=\"cm\"> * run `git log`.</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> <span class=\"cm\"> */</span>\n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span> <span class=\"kd\">var</span> <span class=\"nx\">gitteh</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;gitteh&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>     <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>     <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;fs&quot;</span><span class=\"p\">);</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span>  \n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span> <span class=\"kd\">var</span> <span class=\"nx\">startTime</span> <span class=\"o\">=</span> <span class=\"nb\">Date</span><span class=\"p\">.</span><span class=\"nx\">now</span><span class=\"p\">();</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span>  \n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span> <span class=\"c1\">// Load up the node-gitteh repository. This will only work if you cloned the </span>\n<a name=\"linum-13\"></a><span class=\"lineno\">13</span> <span class=\"c1\">// repo of course.</span>\n<a name=\"linum-14\"></a><span class=\"lineno special\">14</span> <span class=\"c1\">// You can point this to anywhere that is housing a git repo, even a bare one.</span>\n<a name=\"linum-15\"></a><span class=\"lineno\">15</span> <span class=\"c1\">// You have to point it to the GIT directory though, so if you&#39;re working with</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\">16</span> <span class=\"c1\">// a repo that has a working copy checked out, you need to point it to the .git</span>\n<a name=\"linum-17\"></a><span class=\"lineno\">17</span> <span class=\"c1\">// folder.</span>\n<a name=\"linum-18\"></a><span class=\"lineno special\">18</span> <span class=\"kd\">var</span> <span class=\"nx\">repository</span> <span class=\"o\">=</span> <span class=\"nx\">gitteh</span><span class=\"p\">.</span><span class=\"nx\">openRepository</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;..&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;.git&quot;</span><span class=\"p\">));</span>\n<a name=\"linum-19\"></a><span class=\"lineno\">19</span>  \n<a name=\"linum-20\"></a><span class=\"lineno special\">20</span> <span class=\"c1\">// First step is to grab the HEAD commit. We use the ref management features of</span>\n<a name=\"linum-21\"></a><span class=\"lineno\">21</span> <span class=\"c1\">// gitteh to achieve this.</span>\n<a name=\"linum-22\"></a><span class=\"lineno special\">22</span> <span class=\"kd\">var</span> <span class=\"nx\">headRef</span> <span class=\"o\">=</span> <span class=\"nx\">repository</span><span class=\"p\">.</span><span class=\"nx\">getReference</span><span class=\"p\">(</span><span class=\"s2\">&quot;HEAD&quot;</span><span class=\"p\">);</span>\n<a name=\"linum-23\"></a><span class=\"lineno\">23</span>  \n<a name=\"linum-24\"></a><span class=\"lineno special\">24</span> <span class=\"c1\">// Just in case the reference is pointing to another reference (symbolic link),</span>\n<a name=\"linum-25\"></a><span class=\"lineno\">25</span> <span class=\"c1\">// we &quot;resolve&quot; the reference to a direct reference (one that points to an OID).</span>\n<a name=\"linum-26\"></a><span class=\"lineno special\">26</span> <span class=\"c1\">// If the ref being pointed to by HEAD is already direct, then resolve does </span>\n<a name=\"linum-27\"></a><span class=\"lineno\">27</span> <span class=\"c1\">// nothing but return the same reference.</span>\n<a name=\"linum-28\"></a><span class=\"lineno special\">28</span> <span class=\"nx\">headRef</span> <span class=\"o\">=</span> <span class=\"nx\">headRef</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<a name=\"linum-29\"></a><span class=\"lineno\">29</span>  \n<a name=\"linum-30\"></a><span class=\"lineno special\">30</span> <span class=\"c1\">// Let&#39;s create a revision walker and traverse the entire commit history.</span>\n<a name=\"linum-31\"></a><span class=\"lineno\">31</span> <span class=\"kd\">var</span> <span class=\"nx\">walker</span> <span class=\"o\">=</span> <span class=\"nx\">repository</span><span class=\"p\">.</span><span class=\"nx\">createWalker</span><span class=\"p\">();</span>\n<a name=\"linum-32\"></a><span class=\"lineno special\">32</span>  \n<a name=\"linum-33\"></a><span class=\"lineno\">33</span> <span class=\"c1\">// Let&#39;s push the head commit onto the revision walker and start walkin&#39;!</span>\n<a name=\"linum-34\"></a><span class=\"lineno special\">34</span>  \n<a name=\"linum-35\"></a><span class=\"lineno\">35</span> <span class=\"c1\">// This will sort our commits by time. They can also be sorted &quot;topologically&quot;,</span>\n<a name=\"linum-36\"></a><span class=\"lineno special\">36</span> <span class=\"c1\">// which will prioritize parents before children. Also SORT_REVERSE can be</span>\n<a name=\"linum-37\"></a><span class=\"lineno\">37</span> <span class=\"c1\">// added to sorting, which will reverse all sorting options chosen.</span>\n<a name=\"linum-38\"></a><span class=\"lineno special\">38</span>  \n<a name=\"linum-39\"></a><span class=\"lineno\">39</span> <span class=\"c1\">// This will start from the most recent commit, and go back in time.</span>\n<a name=\"linum-40\"></a><span class=\"lineno special\">40</span> <span class=\"c1\">// Note that you have to set sorting BEFORE you push a commit to traverse from.</span>\n<a name=\"linum-41\"></a><span class=\"lineno\">41</span> <span class=\"nx\">walker</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">gitteh</span><span class=\"p\">.</span><span class=\"nx\">GIT_SORT_TIME</span><span class=\"p\">);</span>\n<a name=\"linum-42\"></a><span class=\"lineno special\">42</span> <span class=\"nx\">walker</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">headRef</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n<a name=\"linum-43\"></a><span class=\"lineno\">43</span>  \n<a name=\"linum-44\"></a><span class=\"lineno special\">44</span> <span class=\"c1\">// This output basically mimicks a basic `git log` command.</span>\n<a name=\"linum-45\"></a><span class=\"lineno\">45</span> <span class=\"kd\">var</span> <span class=\"nx\">commit</span><span class=\"p\">;</span>\n<a name=\"linum-46\"></a><span class=\"lineno special\">46</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nx\">commit</span> <span class=\"o\">=</span> <span class=\"nx\">walker</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n<a name=\"linum-47\"></a><span class=\"lineno\">47</span>     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;commit &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n<a name=\"linum-48\"></a><span class=\"lineno special\">48</span>  \n<a name=\"linum-49\"></a><span class=\"lineno\">49</span>     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Author: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &lt;&quot;</span> <span class=\"o\">+</span> \n<a name=\"linum-50\"></a><span class=\"lineno special\">50</span>             <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">.</span><span class=\"nx\">email</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">);</span>\n<a name=\"linum-51\"></a><span class=\"lineno\">51</span>      \n<a name=\"linum-52\"></a><span class=\"lineno special\">52</span>     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">committer</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">!=</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">||</span> \n<a name=\"linum-53\"></a><span class=\"lineno\">53</span>             <span class=\"p\">(</span><span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">committer</span><span class=\"p\">.</span><span class=\"nx\">email</span> <span class=\"o\">!=</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n<a name=\"linum-54\"></a><span class=\"lineno special\">54</span>         <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Committer: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">committer</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &lt;&quot;</span> <span class=\"o\">+</span> \n<a name=\"linum-55\"></a><span class=\"lineno\">55</span>                 <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">committer</span><span class=\"p\">.</span><span class=\"nx\">email</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">);</span>\n<a name=\"linum-56\"></a><span class=\"lineno special\">56</span>     <span class=\"p\">}</span>\n<a name=\"linum-57\"></a><span class=\"lineno\">57</span>  \n<a name=\"linum-58\"></a><span class=\"lineno special\">58</span>     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Date: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">committer</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">toUTCString</span><span class=\"p\">());</span>\n<a name=\"linum-59\"></a><span class=\"lineno\">59</span>      \n<a name=\"linum-60\"></a><span class=\"lineno special\">60</span>     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;\\n    &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">commit</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;\\n&quot;</span><span class=\"p\">);</span>\n<a name=\"linum-61\"></a><span class=\"lineno\">61</span> <span class=\"p\">}</span>\n<a name=\"linum-62\"></a><span class=\"lineno special\">62</span>  \n<a name=\"linum-63\"></a><span class=\"lineno\">63</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">((</span><span class=\"nb\">Date</span><span class=\"p\">.</span><span class=\"nx\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">startTime</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;ms&quot;</span><span class=\"p\">);</span>\n</pre></div>\n","ctime":1304696701152,"id":"3720"}}
{"key":"3893","val":{"description":"JAVA sucks","filename":"javasucks.java","language":"Java","code":"public static void main(String[] args) {\r\n    System.out.println(\"This is all the code needed to create a function that prints a silly message. Not verbose at all :D\");\r\n}\r\n","author":"oracle","irc":"#tech","expires":"1d","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span>     <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;This is all the code needed to create a function that prints a silly message. Not verbose at all :D&quot;</span><span class=\"o\">);</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">3</span> <span class=\"o\">}</span>\n</pre></div>\n","ctime":1304607175000,"id":"3893","archived":true}}
{"key":"6554","val":{"description":"Rook - web server for R","filename":"json_server.r","language":"S","code":"library(\"Rook\")\r\nserver <- Rhttpd$new()\r\noptions('Rhttpd_debug'=0)\r\nserver$start(listen='10.17.105.48',port='8081',quiet=FALSE)\r\napp <- setRefClass('Hist',\r\n                   methods = list(\r\n                     call = function(env){\r\n                       req <- Rook::Request$new(env)\r\n                       callback <- req$GET()[['callback']]\r\n                       x <- as.integer(req$GET()[['x']])\r\n                       y <- as.integer(req$GET()[['y']])\r\n                       data1 <- load1(x,y)\r\n                       list(status=200,\r\n                            headers = list('Content-Type' = 'application/json'),\r\n                            body = paste(callback,\"(\",data1,\")\",sep=\"\")\r\n                            )\r\n                     }\r\n                     )\r\n                   )$new()\r\nserver$add(app,name='respashist')\r\n","author":"Westin","irc":"","expires":"1d","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> library<span class=\"p\">(</span><span class=\"s\">&quot;Rook&quot;</span><span class=\"p\">)</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> server <span class=\"o\">&lt;-</span> Rhttpd<span class=\"p\">$</span>new<span class=\"p\">()</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> options<span class=\"p\">(</span><span class=\"s\">&#39;Rhttpd_debug&#39;</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> server<span class=\"p\">$</span>start<span class=\"p\">(</span>listen<span class=\"o\">=</span><span class=\"s\">&#39;10.17.105.48&#39;</span><span class=\"p\">,</span>port<span class=\"o\">=</span><span class=\"s\">&#39;8081&#39;</span><span class=\"p\">,</span>quiet<span class=\"o\">=</span><span class=\"kc\">FALSE</span><span class=\"p\">)</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> app <span class=\"o\">&lt;-</span> setRefClass<span class=\"p\">(</span><span class=\"s\">&#39;Hist&#39;</span><span class=\"p\">,</span>\n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span>                    methods <span class=\"o\">=</span> list<span class=\"p\">(</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>                      call <span class=\"o\">=</span> <span class=\"kr\">function</span><span class=\"p\">(</span>env<span class=\"p\">){</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>                        req <span class=\"o\">&lt;-</span> Rook<span class=\"p\">::</span>Request<span class=\"p\">$</span>new<span class=\"p\">(</span>env<span class=\"p\">)</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span>                        callback <span class=\"o\">&lt;-</span> req<span class=\"p\">$</span>GET<span class=\"p\">()[[</span><span class=\"s\">&#39;callback&#39;</span><span class=\"p\">]]</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span>                        x <span class=\"o\">&lt;-</span> as.integer<span class=\"p\">(</span>req<span class=\"p\">$</span>GET<span class=\"p\">()[[</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">]])</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span>                        y <span class=\"o\">&lt;-</span> as.integer<span class=\"p\">(</span>req<span class=\"p\">$</span>GET<span class=\"p\">()[[</span><span class=\"s\">&#39;y&#39;</span><span class=\"p\">]])</span>\n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span>                        data1 <span class=\"o\">&lt;-</span> load1<span class=\"p\">(</span>x<span class=\"p\">,</span>y<span class=\"p\">)</span>\n<a name=\"linum-13\"></a><span class=\"lineno\">13</span>                        list<span class=\"p\">(</span>status<span class=\"o\">=</span><span class=\"m\">200</span><span class=\"p\">,</span>\n<a name=\"linum-14\"></a><span class=\"lineno special\">14</span>                             headers <span class=\"o\">=</span> list<span class=\"p\">(</span><span class=\"s\">&#39;Content-Type&#39;</span> <span class=\"o\">=</span> <span class=\"s\">&#39;application/json&#39;</span><span class=\"p\">),</span>\n<a name=\"linum-15\"></a><span class=\"lineno\">15</span>                             body <span class=\"o\">=</span> paste<span class=\"p\">(</span>callback<span class=\"p\">,</span><span class=\"s\">&quot;(&quot;</span><span class=\"p\">,</span>data1<span class=\"p\">,</span><span class=\"s\">&quot;)&quot;</span><span class=\"p\">,</span>sep<span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\">16</span>                             <span class=\"p\">)</span>\n<a name=\"linum-17\"></a><span class=\"lineno\">17</span>                      <span class=\"p\">}</span>\n<a name=\"linum-18\"></a><span class=\"lineno special\">18</span>                      <span class=\"p\">)</span>\n<a name=\"linum-19\"></a><span class=\"lineno\">19</span>                    <span class=\"p\">)$</span>new<span class=\"p\">()</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\">20</span> server<span class=\"p\">$</span>add<span class=\"p\">(</span>app<span class=\"p\">,</span>name<span class=\"o\">=</span><span class=\"s\">&#39;respashist&#39;</span><span class=\"p\">)</span>\n</pre></div>\n","ctime":1304610277000,"id":"6554","archived":true}}
{"key":"2884","val":{"description":"test","filename":"gistfile.css","language":"CSS","code":"html { margin: 0 }","author":"","irc":"","expires":"","hl_code":"","ctime":1305045525462,"id":"2884"}}
{"key":"9192","val":{"description":"","filename":"gistfile.erl","language":"Erlang","code":"-module(test).\r\n","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1305186120194,"id":"9192"}}
{"key":"9192","val":{"description":"","filename":"gistfile.erl","language":"Erlang","code":"-module(test).\r\n","author":"","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1305186120194,"id":"9192","archived":true}}
{"key":"2884","val":{"description":"test","filename":"gistfile.css","language":"CSS","code":"html { margin: 0 }","author":"","irc":"","expires":"","hl_code":"","ctime":1305045525462,"id":"2884","archived":true}}
{"key":"4130","val":{"description":"Find business objects in kred","filename":"find_business_objects.erl","language":"Erlang","code":"[BO|| BO <-filelib:wildcard(filename:join([kred:libdir(),\"*\",\"ebin\",\"*beam\"])),re:run(BO, \"_bo.beam\") =/= nomatch].","author":"Tobias","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"p\">[</span><span class=\"nv\">BO</span><span class=\"p\">||</span> <span class=\"nv\">BO</span> <span class=\"o\">&lt;-</span><span class=\"nn\">filelib</span><span class=\"p\">:</span><span class=\"n\">wildcard</span><span class=\"p\">(</span><span class=\"nn\">filename</span><span class=\"p\">:</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nn\">kred</span><span class=\"p\">:</span><span class=\"n\">libdir</span><span class=\"p\">(),</span><span class=\"s\">&quot;*&quot;</span><span class=\"p\">,</span><span class=\"s\">&quot;ebin&quot;</span><span class=\"p\">,</span><span class=\"s\">&quot;*beam&quot;</span><span class=\"p\">])),</span><span class=\"nn\">re</span><span class=\"p\">:</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"nv\">BO</span><span class=\"p\">,</span> <span class=\"s\">&quot;_bo.beam&quot;</span><span class=\"p\">)</span> <span class=\"o\">=/=</span> <span class=\"n\">nomatch</span><span class=\"p\">].</span>\n</pre></div>\n","ctime":1305187639320,"id":"4130"}}
{"key":"3718","val":{"description":"set up bash to share history between all shells","filename":".bashrc","language":"Bash","code":"export HISTCONTROL=\"ignoredups\"                                                  \r\nshopt -s histappend                                                              PROMPT_COMMAND=\"$PROMPT_COMMAND ; history -a ; history -c; history -r\"          ","author":"masse","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nb\">export </span><span class=\"nv\">HISTCONTROL</span><span class=\"o\">=</span><span class=\"s2\">&quot;ignoredups&quot;</span>                                                  \n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span> <span class=\"nb\">shopt</span> -s histappend                                                              <span class=\"nv\">PROMPT_COMMAND</span><span class=\"o\">=</span><span class=\"s2\">&quot;$PROMPT_COMMAND ; history -a ; history -c; history -r&quot;</span>          \n</pre></div>\n","ctime":1305192404104,"id":"3718"}}
{"key":"3718","val":{"description":"set up bash to share history between all shells","filename":".bashrc","language":"Bash","code":"export HISTCONTROL=\"ignoredups\"                                                  \r\nshopt -s histappend                                                              PROMPT_COMMAND=\"$PROMPT_COMMAND ; history -a ; history -c; history -r\"          ","author":"masse","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nb\">export </span><span class=\"nv\">HISTCONTROL</span><span class=\"o\">=</span><span class=\"s2\">&quot;ignoredups&quot;</span>                                                  \n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span> <span class=\"nb\">shopt</span> -s histappend                                                              <span class=\"nv\">PROMPT_COMMAND</span><span class=\"o\">=</span><span class=\"s2\">&quot;$PROMPT_COMMAND ; history -a ; history -c; history -r&quot;</span>          \n</pre></div>\n","ctime":1305192404104,"id":"3718","archived":true}}
{"key":"7727","val":{"description":"set up bash to share history between all shells","filename":".bashrc","language":"Bash","code":"# agglomerate history from multiple shells\r\nexport HISTCONTROL=\"ignoredups\"\r\nshopt -s histappend\r\nPROMPT_COMMAND=\"$PROMPT_COMMAND ; history -a ; history -c; history -r\"\r\n","author":"masse","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"c\"># agglomerate history from multiple shells</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span> <span class=\"nb\">export </span><span class=\"nv\">HISTCONTROL</span><span class=\"o\">=</span><span class=\"s2\">&quot;ignoredups&quot;</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">3</span> <span class=\"nb\">shopt</span> -s histappend\n<a name=\"linum-4\"></a><span class=\"lineno special\">4</span> <span class=\"nv\">PROMPT_COMMAND</span><span class=\"o\">=</span><span class=\"s2\">&quot;$PROMPT_COMMAND ; history -a ; history -c; history -r&quot;</span>\n</pre></div>\n","ctime":1305192497071,"id":"7727"}}
{"key":"7460","val":{"description":"","filename":"gistfile.erl","language":"Erlang","code":"-module(test).","author":"uwe","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1305234472179,"id":"7460"}}
{"key":"7460","val":{"description":"","filename":"gistfile.erl","language":"Erlang","code":"-module(test).","author":"uwe","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1305234472179,"id":"7460","archived":true}}
{"key":"9417","val":{"description":"Boost your KO user privileges","filename":"gistfile.erl","language":"Erlang","code":"%% paste this in the kred shell of your test machine\r\nkdb:transaction(fun () ->\r\n               Kuser = kuser:read_t(\"admin\"), NewKuser = Kuser#kuser{levels = (1 bsl 100) - 1}, kuser:write_t(NewKuser)   end). ","author":"RCardell","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"c\">%% paste this in the kred shell of your test machine</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span> <span class=\"nn\">kdb</span><span class=\"p\">:</span><span class=\"n\">transaction</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">3</span>                <span class=\"nv\">Kuser</span> <span class=\"o\">=</span> <span class=\"nn\">kuser</span><span class=\"p\">:</span><span class=\"n\">read_t</span><span class=\"p\">(</span><span class=\"s\">&quot;admin&quot;</span><span class=\"p\">),</span> <span class=\"nv\">NewKuser</span> <span class=\"o\">=</span> <span class=\"nv\">Kuser</span><span class=\"nl\">#kuser</span><span class=\"p\">{</span><span class=\"n\">levels</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"ow\">bsl</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nn\">kuser</span><span class=\"p\">:</span><span class=\"n\">write_t</span><span class=\"p\">(</span><span class=\"nv\">NewKuser</span><span class=\"p\">)</span>   <span class=\"k\">end</span><span class=\"p\">).</span> \n</pre></div>\n","ctime":1305276303662,"id":"9417"}}
{"key":"2149","val":{"description":"Find record fields in the kred system, e.g., list all records that has a field called 'invno' or a field called 'pno'.","filename":"find_record_fields.erl","language":"Erlang","code":"FieldNames = [invno, pno], %% Change here\r\n{ok, AC} = dialyzer_utils:get_abstract_code_from_beam(code:which(rr)),\r\n{ok, RTInfo} = dialyzer_utils:get_record_and_type_info(AC),\r\ndict:fold(fun({record, Name}, [{_Arity, Attrs}], Acc) ->\r\n                case [X || {X, _} <- Attrs, lists:member(X, FieldNames)] of\r\n                   [] -> Acc;\r\n                   [_|_] = Fields -> [{Name, Fields}|Acc]\r\n                end;\r\n             (_, _, Acc) -> Acc\r\n          end,\r\n          [],\r\n          RTInfo).\r\n","author":"Tobias","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"nv\">FieldNames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">invno</span><span class=\"p\">,</span> <span class=\"n\">pno</span><span class=\"p\">],</span> <span class=\"c\">%% Change here</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">AC</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">dialyzer_utils</span><span class=\"p\">:</span><span class=\"n\">get_abstract_code_from_beam</span><span class=\"p\">(</span><span class=\"nn\">code</span><span class=\"p\">:</span><span class=\"n\">which</span><span class=\"p\">(</span><span class=\"n\">rr</span><span class=\"p\">)),</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">RTInfo</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">dialyzer_utils</span><span class=\"p\">:</span><span class=\"n\">get_record_and_type_info</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">),</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> <span class=\"nn\">dict</span><span class=\"p\">:</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">({</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">},</span> <span class=\"p\">[{_</span><span class=\"nv\">Arity</span><span class=\"p\">,</span> <span class=\"nv\">Attrs</span><span class=\"p\">}],</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span>                 <span class=\"k\">case</span> <span class=\"p\">[</span><span class=\"nv\">X</span> <span class=\"p\">||</span> <span class=\"p\">{</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">Attrs</span><span class=\"p\">,</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">member</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">FieldNames</span><span class=\"p\">)]</span> <span class=\"k\">of</span>\n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span>                    <span class=\"p\">[]</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span><span class=\"p\">;</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>                    <span class=\"p\">[_|_]</span> <span class=\"o\">=</span> <span class=\"nv\">Fields</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[{</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Fields</span><span class=\"p\">}|</span><span class=\"nv\">Acc</span><span class=\"p\">]</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>                 <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span>              <span class=\"p\">(_,</span> <span class=\"p\">_,</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span>           <span class=\"k\">end</span><span class=\"p\">,</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span>           <span class=\"p\">[],</span>\n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span>           <span class=\"nv\">RTInfo</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1305297174613,"id":"2149"}}
{"key":"8291","val":{"description":"A pimped orddict:find","filename":"orddict_ext.erl","language":"Erlang","code":"%%------------------------------------------------------------------------------\r\n%% @spec find(Keys :: [any()], D :: orddict()) -> {ok, [any()]} | error\r\n%% @doc Keys must be a sorted list with only unique keys. Returns a list with\r\n%%      values in the same order as the keys or error.\r\n%% @end\r\nfind(Keys, D) when is_list(Keys) -> find(Keys, D, []).\r\n\r\nfind([_|_], [], _Res)                             -> error;\r\nfind([Key|_], [{K,_}|_], _Res) when Key < K       -> error;\r\nfind([Key|_] = Keys, [{K,_}|D], Res) when Key > K -> find(Keys, D, Res);\r\nfind([_Key|Keys], [{_K,V}|D], Res)                -> find(Keys, D, Res++[V]);\r\nfind([], _D, Res)                                 -> {ok, Res}.\r\n\r\n-ifdef(EUNIT).\r\nfind_test_() ->\r\n  {inparallel,\r\n   [ ?_assertEqual(error,\r\n                   find([a, b], orddict:from_list([{a, 3}, {c, 4}])))\r\n   , ?_assertEqual({ok, [1,3]},\r\n                   find([a, c], orddict:from_list([{a, 1}, {b, 2}, {c, 3}])))\r\n   ]\r\n  }.\r\n\r\n-endif.","author":"markus","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"c\">%%------------------------------------------------------------------------------</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> <span class=\"c\">%% @spec find(Keys :: [any()], D :: orddict()) -&gt; {ok, [any()]} | error</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"c\">%% @doc Keys must be a sorted list with only unique keys. Returns a list with</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> <span class=\"c\">%%      values in the same order as the keys or error.</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> <span class=\"c\">%% @end</span>\n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"nv\">Keys</span><span class=\"p\">,</span> <span class=\"nv\">D</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">Keys</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nv\">Keys</span><span class=\"p\">,</span> <span class=\"nv\">D</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span> \n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span> <span class=\"nf\">find</span><span class=\"p\">([_|_],</span> <span class=\"p\">[],</span> <span class=\"p\">_</span><span class=\"nv\">Res</span><span class=\"p\">)</span>                             <span class=\"o\">-&gt;</span> <span class=\"n\">error</span><span class=\"p\">;</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span> <span class=\"nf\">find</span><span class=\"p\">([</span><span class=\"nv\">Key</span><span class=\"p\">|_],</span> <span class=\"p\">[{</span><span class=\"nv\">K</span><span class=\"p\">,_}|_],</span> <span class=\"p\">_</span><span class=\"nv\">Res</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nv\">Key</span> <span class=\"o\">&lt;</span> <span class=\"nv\">K</span>       <span class=\"o\">-&gt;</span> <span class=\"n\">error</span><span class=\"p\">;</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span> <span class=\"nf\">find</span><span class=\"p\">([</span><span class=\"nv\">Key</span><span class=\"p\">|_]</span> <span class=\"o\">=</span> <span class=\"nv\">Keys</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"nv\">K</span><span class=\"p\">,_}|</span><span class=\"nv\">D</span><span class=\"p\">],</span> <span class=\"nv\">Res</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nv\">Key</span> <span class=\"o\">&gt;</span> <span class=\"nv\">K</span> <span class=\"o\">-&gt;</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nv\">Keys</span><span class=\"p\">,</span> <span class=\"nv\">D</span><span class=\"p\">,</span> <span class=\"nv\">Res</span><span class=\"p\">);</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span> <span class=\"nf\">find</span><span class=\"p\">([_</span><span class=\"nv\">Key</span><span class=\"p\">|</span><span class=\"nv\">Keys</span><span class=\"p\">],</span> <span class=\"p\">[{_</span><span class=\"nv\">K</span><span class=\"p\">,</span><span class=\"nv\">V</span><span class=\"p\">}|</span><span class=\"nv\">D</span><span class=\"p\">],</span> <span class=\"nv\">Res</span><span class=\"p\">)</span>                <span class=\"o\">-&gt;</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nv\">Keys</span><span class=\"p\">,</span> <span class=\"nv\">D</span><span class=\"p\">,</span> <span class=\"nv\">Res</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">V</span><span class=\"p\">]);</span>\n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span> <span class=\"nf\">find</span><span class=\"p\">([],</span> <span class=\"p\">_</span><span class=\"nv\">D</span><span class=\"p\">,</span> <span class=\"nv\">Res</span><span class=\"p\">)</span>                                 <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Res</span><span class=\"p\">}.</span>\n<a name=\"linum-13\"></a><span class=\"lineno\">13</span> \n<a name=\"linum-14\"></a><span class=\"lineno special\">14</span> <span class=\"p\">-</span><span class=\"ni\">ifdef</span><span class=\"p\">(</span><span class=\"nv\">EUNIT</span><span class=\"p\">).</span>\n<a name=\"linum-15\"></a><span class=\"lineno\">15</span> <span class=\"nf\">find_test_</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\">16</span>   <span class=\"p\">{</span><span class=\"n\">inparallel</span><span class=\"p\">,</span>\n<a name=\"linum-17\"></a><span class=\"lineno\">17</span>    <span class=\"p\">[</span> <span class=\"no\">?_assertEqual</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<a name=\"linum-18\"></a><span class=\"lineno special\">18</span>                    <span class=\"n\">find</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">],</span> <span class=\"nn\">orddict</span><span class=\"p\">:</span><span class=\"n\">from_list</span><span class=\"p\">([{</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}])))</span>\n<a name=\"linum-19\"></a><span class=\"lineno\">19</span>    <span class=\"p\">,</span> <span class=\"no\">?_assertEqual</span><span class=\"p\">({</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]},</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\">20</span>                    <span class=\"n\">find</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">],</span> <span class=\"nn\">orddict</span><span class=\"p\">:</span><span class=\"n\">from_list</span><span class=\"p\">([{</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}])))</span>\n<a name=\"linum-21\"></a><span class=\"lineno\">21</span>    <span class=\"p\">]</span>\n<a name=\"linum-22\"></a><span class=\"lineno special\">22</span>   <span class=\"p\">}.</span>\n<a name=\"linum-23\"></a><span class=\"lineno\">23</span> \n<a name=\"linum-24\"></a><span class=\"lineno special\">24</span> <span class=\"p\">-</span><span class=\"ni\">endif</span><span class=\"p\">.</span>\n</pre></div>\n","ctime":1305526035179,"id":"8291"}}
{"key":"5404","val":{"description":"","filename":"ctime_test.sh","language":"Bash","code":"#!/bin/bash\r\n\r\necho test","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"c\">#!/bin/bash</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span> \n<a name=\"linum-3\"></a><span class=\"lineno\">3</span> <span class=\"nb\">echo test</span>\n</pre></div>\n","ctime":1304618296792,"id":"5404","archived":true}}
{"key":"1839","val":{"description":"now with line numbers","filename":"final_linum_test.erl","language":"Erlang","code":"foldf(State, Fs) ->\r\n    lists:foldr(fun(F,Acc) -> F(Acc) end, State, Fs).","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">1</span> <span class=\"nf\">foldf</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">2</span>     <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Fs</span><span class=\"p\">).</span>\n</pre></div>\n","ctime":1304457145000,"id":"1839","archived":true}}
{"key":"1789","val":{"description":"Multi char linenumber test","filename":"index.html","language":"HTML","code":"<html>\r\n<head>\r\n<title>test</title>\r\n</head>\r\n\r\n<body>\r\n  <div>\r\n    <p>test</p>\r\n  </div>\r\n</body>\r\n</html>","author":"uwe","irc":"","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"nt\">&lt;html&gt;</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> <span class=\"nt\">&lt;head&gt;</span>\n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"nt\">&lt;title&gt;</span>test<span class=\"nt\">&lt;/title&gt;</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> <span class=\"nt\">&lt;/head&gt;</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> \n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span> <span class=\"nt\">&lt;body&gt;</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>   <span class=\"nt\">&lt;div&gt;</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>     <span class=\"nt\">&lt;p&gt;</span>test<span class=\"nt\">&lt;/p&gt;</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span>   <span class=\"nt\">&lt;/div&gt;</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span> <span class=\"nt\">&lt;/body&gt;</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span> <span class=\"nt\">&lt;/html&gt;</span>\n</pre></div>\n","ctime":1304536959000,"id":"1789","archived":true}}
{"key":"4767","val":{"description":"Enable auto-complete-mode to use Distel for Erlang lookups","filename":"auto-complete-distel.el","language":"Common Lisp","code":";; auto-complete-distel\r\n\r\n;; really fugly hack\r\n;; this assumes you have a node up and running\r\n\r\n(require 'auto-complete)\r\n(eval-when-compile\r\n  (require 'cl))\r\n\r\n(defvar ac-source-distel\r\n  '((candidates . ac-distel-candidates)\r\n    (requires . 0)\r\n    (cache)))\r\n\r\n(defvar ac-distel-candidates-cache nil\r\n  \"Horrible global variable that caches the selection to be returned.\")\r\n\r\n(defun ac-distel-candidates ()\r\n  (ac-distel-complete)\r\n  ac-distel-candidates-cache)\r\n\r\n(defun ac-distel-complete ()\r\n  \"Complete the module or remote function name at point.\"\r\n  (interactive)\r\n  (let ((node erl-nodename-cache)\r\n        (end (point))\r\n    (beg (ignore-errors\r\n           (save-excursion (backward-sexp 1)\r\n                   ;; FIXME: see erl-goto-end-of-call-name\r\n                   (when (eql (char-before) ?:)\r\n                 (backward-sexp 1))\r\n                   (point)))))\r\n    (when beg\r\n      (let* ((str (buffer-substring-no-properties beg end))\r\n         (buf (current-buffer))\r\n         (continuing (equal last-command (cons 'erl-complete str))))\r\n    (setq this-command (cons 'erl-complete str))\r\n    (if (string-match \"^\\\\(.*\\\\):\\\\(.*\\\\)$\" str)\r\n        ;; completing function in module:function\r\n        (let ((mod (intern (match-string 1 str)))\r\n          (pref (match-string 2 str))\r\n          (beg (+ beg (match-beginning 2))))\r\n          (erl-spawn\r\n        (erl-send-rpc node 'distel 'functions (list mod pref))\r\n        (&ac-distel-receive-completions \"function\" beg end pref buf\r\n                                                continuing)))\r\n      ;; completing just a module\r\n      (erl-spawn\r\n        (erl-send-rpc node 'distel 'modules (list str))\r\n        (&ac-distel-receive-completions \"module\" beg end str buf continuing))\r\n          )))))\r\n\r\n(defun &ac-distel-receive-completions (what beg end prefix buf continuing)\r\n  (let ((state (erl-async-state buf)))\r\n    (erl-receive (what state beg end prefix buf continuing)\r\n    ((['rex ['ok completions]]\r\n          (setq ac-distel-candidates-cache completions)\r\n          )\r\n     (['rex ['error reason]]\r\n      (message \"Error: %s\" reason))\r\n     (other\r\n      (message \"Unexpected reply: %S\" other))))))\r\n\r\n(provide 'auto-complete-distel)","author":"robin","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"c1\">;; auto-complete-distel</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> \n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"c1\">;; really fugly hack</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span> <span class=\"c1\">;; this assumes you have a node up and running</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span> \n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span> <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-complete</span><span class=\"p\">)</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span> <span class=\"p\">(</span><span class=\"nv\">eval-when-compile</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span>   <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">))</span>\n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span> \n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span> <span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">ac-source-distel</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span>   <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">candidates</span> <span class=\"o\">.</span> <span class=\"nv\">ac-distel-candidates</span><span class=\"p\">)</span>\n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span>     <span class=\"p\">(</span><span class=\"nv\">requires</span> <span class=\"o\">.</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<a name=\"linum-13\"></a><span class=\"lineno\">13</span>     <span class=\"p\">(</span><span class=\"nv\">cache</span><span class=\"p\">)))</span>\n<a name=\"linum-14\"></a><span class=\"lineno special\">14</span> \n<a name=\"linum-15\"></a><span class=\"lineno\">15</span> <span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">ac-distel-candidates-cache</span> <span class=\"no\">nil</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\">16</span>   <span class=\"s\">&quot;Horrible global variable that caches the selection to be returned.&quot;</span><span class=\"p\">)</span>\n<a name=\"linum-17\"></a><span class=\"lineno\">17</span> \n<a name=\"linum-18\"></a><span class=\"lineno special\">18</span> <span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-distel-candidates</span> <span class=\"p\">()</span>\n<a name=\"linum-19\"></a><span class=\"lineno\">19</span>   <span class=\"p\">(</span><span class=\"nv\">ac-distel-complete</span><span class=\"p\">)</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\">20</span>   <span class=\"nv\">ac-distel-candidates-cache</span><span class=\"p\">)</span>\n<a name=\"linum-21\"></a><span class=\"lineno\">21</span> \n<a name=\"linum-22\"></a><span class=\"lineno special\">22</span> <span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-distel-complete</span> <span class=\"p\">()</span>\n<a name=\"linum-23\"></a><span class=\"lineno\">23</span>   <span class=\"s\">&quot;Complete the module or remote function name at point.&quot;</span>\n<a name=\"linum-24\"></a><span class=\"lineno special\">24</span>   <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n<a name=\"linum-25\"></a><span class=\"lineno\">25</span>   <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">node</span> <span class=\"nv\">erl-nodename-cache</span><span class=\"p\">)</span>\n<a name=\"linum-26\"></a><span class=\"lineno special\">26</span>         <span class=\"p\">(</span><span class=\"nv\">end</span> <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">))</span>\n<a name=\"linum-27\"></a><span class=\"lineno\">27</span>     <span class=\"p\">(</span><span class=\"nv\">beg</span> <span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>\n<a name=\"linum-28\"></a><span class=\"lineno special\">28</span>            <span class=\"p\">(</span><span class=\"nv\">save-excursion</span> <span class=\"p\">(</span><span class=\"nv\">backward-sexp</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<a name=\"linum-29\"></a><span class=\"lineno\">29</span>                    <span class=\"c1\">;; FIXME: see erl-goto-end-of-call-name</span>\n<a name=\"linum-30\"></a><span class=\"lineno special\">30</span>                    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eql</span> <span class=\"p\">(</span><span class=\"nv\">char-before</span><span class=\"p\">)</span> <span class=\"nv\">?:</span><span class=\"p\">)</span>\n<a name=\"linum-31\"></a><span class=\"lineno\">31</span>                  <span class=\"p\">(</span><span class=\"nv\">backward-sexp</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<a name=\"linum-32\"></a><span class=\"lineno special\">32</span>                    <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">)))))</span>\n<a name=\"linum-33\"></a><span class=\"lineno\">33</span>     <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">beg</span>\n<a name=\"linum-34\"></a><span class=\"lineno special\">34</span>       <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">str</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">))</span>\n<a name=\"linum-35\"></a><span class=\"lineno\">35</span>          <span class=\"p\">(</span><span class=\"nv\">buf</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))</span>\n<a name=\"linum-36\"></a><span class=\"lineno special\">36</span>          <span class=\"p\">(</span><span class=\"nv\">continuing</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">last-command</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"ss\">&#39;erl-complete</span> <span class=\"nv\">str</span><span class=\"p\">))))</span>\n<a name=\"linum-37\"></a><span class=\"lineno\">37</span>     <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">this-command</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"ss\">&#39;erl-complete</span> <span class=\"nv\">str</span><span class=\"p\">))</span>\n<a name=\"linum-38\"></a><span class=\"lineno special\">38</span>     <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"s\">&quot;^\\\\(.*\\\\):\\\\(.*\\\\)$&quot;</span> <span class=\"nv\">str</span><span class=\"p\">)</span>\n<a name=\"linum-39\"></a><span class=\"lineno\">39</span>         <span class=\"c1\">;; completing function in module:function</span>\n<a name=\"linum-40\"></a><span class=\"lineno special\">40</span>         <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">1</span> <span class=\"nv\">str</span><span class=\"p\">)))</span>\n<a name=\"linum-41\"></a><span class=\"lineno\">41</span>           <span class=\"p\">(</span><span class=\"nv\">pref</span> <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">2</span> <span class=\"nv\">str</span><span class=\"p\">))</span>\n<a name=\"linum-42\"></a><span class=\"lineno special\">42</span>           <span class=\"p\">(</span><span class=\"nv\">beg</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"nv\">beg</span> <span class=\"p\">(</span><span class=\"nv\">match-beginning</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n<a name=\"linum-43\"></a><span class=\"lineno\">43</span>           <span class=\"p\">(</span><span class=\"nv\">erl-spawn</span>\n<a name=\"linum-44\"></a><span class=\"lineno special\">44</span>         <span class=\"p\">(</span><span class=\"nv\">erl-send-rpc</span> <span class=\"nv\">node</span> <span class=\"ss\">&#39;distel</span> <span class=\"ss\">&#39;functions</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nb\">mod</span> <span class=\"nv\">pref</span><span class=\"p\">))</span>\n<a name=\"linum-45\"></a><span class=\"lineno\">45</span>         <span class=\"p\">(</span><span class=\"nv\">&amp;ac-distel-receive-completions</span> <span class=\"s\">&quot;function&quot;</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span> <span class=\"nv\">pref</span> <span class=\"nv\">buf</span>\n<a name=\"linum-46\"></a><span class=\"lineno special\">46</span>                                                 <span class=\"nv\">continuing</span><span class=\"p\">)))</span>\n<a name=\"linum-47\"></a><span class=\"lineno\">47</span>       <span class=\"c1\">;; completing just a module</span>\n<a name=\"linum-48\"></a><span class=\"lineno special\">48</span>       <span class=\"p\">(</span><span class=\"nv\">erl-spawn</span>\n<a name=\"linum-49\"></a><span class=\"lineno\">49</span>         <span class=\"p\">(</span><span class=\"nv\">erl-send-rpc</span> <span class=\"nv\">node</span> <span class=\"ss\">&#39;distel</span> <span class=\"ss\">&#39;modules</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">str</span><span class=\"p\">))</span>\n<a name=\"linum-50\"></a><span class=\"lineno special\">50</span>         <span class=\"p\">(</span><span class=\"nv\">&amp;ac-distel-receive-completions</span> <span class=\"s\">&quot;module&quot;</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span> <span class=\"nv\">str</span> <span class=\"nv\">buf</span> <span class=\"nv\">continuing</span><span class=\"p\">))</span>\n<a name=\"linum-51\"></a><span class=\"lineno\">51</span>           <span class=\"p\">)))))</span>\n<a name=\"linum-52\"></a><span class=\"lineno special\">52</span> \n<a name=\"linum-53\"></a><span class=\"lineno\">53</span> <span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">&amp;ac-distel-receive-completions</span> <span class=\"p\">(</span><span class=\"nv\">what</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span> <span class=\"nv\">prefix</span> <span class=\"nv\">buf</span> <span class=\"nv\">continuing</span><span class=\"p\">)</span>\n<a name=\"linum-54\"></a><span class=\"lineno special\">54</span>   <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">state</span> <span class=\"p\">(</span><span class=\"nv\">erl-async-state</span> <span class=\"nv\">buf</span><span class=\"p\">)))</span>\n<a name=\"linum-55\"></a><span class=\"lineno\">55</span>     <span class=\"p\">(</span><span class=\"nv\">erl-receive</span> <span class=\"p\">(</span><span class=\"nv\">what</span> <span class=\"nv\">state</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span> <span class=\"nv\">prefix</span> <span class=\"nv\">buf</span> <span class=\"nv\">continuing</span><span class=\"p\">)</span>\n<a name=\"linum-56\"></a><span class=\"lineno special\">56</span>     <span class=\"p\">((</span><span class=\"nv\">[</span><span class=\"ss\">&#39;rex</span> <span class=\"nv\">[</span><span class=\"ss\">&#39;ok</span> <span class=\"nv\">completions]]</span>\n<a name=\"linum-57\"></a><span class=\"lineno\">57</span>           <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ac-distel-candidates-cache</span> <span class=\"nv\">completions</span><span class=\"p\">)</span>\n<a name=\"linum-58\"></a><span class=\"lineno special\">58</span>           <span class=\"p\">)</span>\n<a name=\"linum-59\"></a><span class=\"lineno\">59</span>      <span class=\"p\">(</span><span class=\"nv\">[</span><span class=\"ss\">&#39;rex</span> <span class=\"nv\">[</span><span class=\"ss\">&#39;error</span> <span class=\"nv\">reason]]</span>\n<a name=\"linum-60\"></a><span class=\"lineno special\">60</span>       <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Error: %s&quot;</span> <span class=\"nv\">reason</span><span class=\"p\">))</span>\n<a name=\"linum-61\"></a><span class=\"lineno\">61</span>      <span class=\"p\">(</span><span class=\"nv\">other</span>\n<a name=\"linum-62\"></a><span class=\"lineno special\">62</span>       <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Unexpected reply: %S&quot;</span> <span class=\"nv\">other</span><span class=\"p\">))))))</span>\n<a name=\"linum-63\"></a><span class=\"lineno\">63</span> \n<a name=\"linum-64\"></a><span class=\"lineno special\">64</span> <span class=\"p\">(</span><span class=\"nb\">provide</span> <span class=\"ss\">&#39;auto-complete-distel</span><span class=\"p\">)</span>\n</pre></div>\n","ctime":1305621096077,"id":"4767"}}
{"key":"1378","val":{"description":"Get the interpreted source code of a given fun in any given form.","filename":"fun_to_src.erl","language":"Erlang","code":"%%% @doc Get the interpreted source code of a given fun in any given form.\r\n%%% @copyright 2011 Klarna AB\r\n%%% @author Uwe Dauernheim <uwe@klarna.com>\r\n-module(fun_to_source).\r\n\r\n-author(\"Uwe Dauernheim <uwe@klarna.com>\").\r\n\r\n-export([ print_fun/0\r\n        , print_fun/1\r\n        ]).\r\n\r\n-include_lib(\"eunit/include/eunit.hrl\").\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% API\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n%% @doc We want to have a set of instructions encapsulated into a thunk:\r\n%%   Instructions = ...,\r\n%%   Fun = {'fun',1,{clauses,Instructions}}.\r\n%% And then output this thunk as a human-readable string:\r\n%%   fun() -> ... end\r\nprint_fun() ->\r\n  {ok,Form,_} = io:parse_erl_exprs('fun-shell> '),\r\n  print_form(Form).\r\n\r\nprint_fun(FunStr) when is_list(FunStr) ->\r\n  {ok,Tokens,_} = erl_scan:string(FunStr),\r\n  {ok,Form}     = erl_parse:parse_exprs(Tokens),\r\n  print_form(Form);\r\nprint_fun(Fun) when is_function(Fun) ->\r\n  FunInfo = erlang:fun_info(Fun),\r\n  Type = proplists:get_value(type,   FunInfo),\r\n  Env  = proplists:get_value(env,    FunInfo),\r\n  M    = proplists:get_value(module, FunInfo),\r\n  F    = proplists:get_value(name,   FunInfo),\r\n  A    = proplists:get_value(arity,  FunInfo),\r\n  case Type of\r\n    external ->\r\n      try\r\n        Form = find_fun(M, F, A),\r\n        print_form(Form)\r\n      catch T:R -> throw({T,R})\r\n      end;\r\n    local ->\r\n      case Env of\r\n        []  ->\r\n          {F2,A2,I} = closure_name_to_fun_location(F, A),\r\n          try\r\n            Form = find_fun(M, F2, A2, I),\r\n            print_form(Form);\r\n          catch T:R -> throw({T,R})\r\n          end;\r\n        Env ->\r\n          [[],_,_,Form0] = Env,\r\n          Form = [{'fun',1,{clauses,Form0}}], %% Add a default fun header\r\n          print_form(Form)\r\n      end\r\n  end.\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% Internals\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n%% @doc Take an AST form and print it as a source code string.\r\nprint_form(Form) ->\r\n  Source = convert_form(Form),\r\n  io:format(\"~s~n\", [Source]).\r\n  \r\n%% @doc Take an AST form and converts it into a source code string.\r\nconvert_form(Form) ->\r\n  Syntax = erl_syntax:form_list(Form),\r\n  erl_prettypr:format(Syntax).\r\n  \r\nfind_fun(M, F, A) ->\r\n  AC = get_ast(M),\r\n  get_fun_form(AC, F, A).\r\n\r\nfind_fun(M, F, A, I) ->\r\n  AC = get_ast(M),\r\n  FunForm = get_fun_form(AC, F, A),\r\n  get_indexed_fun_form(FunForm, I).\r\n\r\nget_ast(Module) ->\r\n  BeamFile = code:which(Module),\r\n  AbstractCode = beam_lib:chunks(BeamFile, [abstract_code]),\r\n  {ok,{Module,[{abstract_code,{raw_abstract_v1,AC}}]}} = AbstractCode,\r\n  AC.\r\n\r\nget_fun_form(AC, F, A) ->\r\n  [Form2] = [Form || {function,_,F0,A0,Form} <- AC, F0 =:= F, A0 =:= A],\r\n  Form2.\r\n\r\n%% @doc This needs big improvements to be more generalized (if it is possible at\r\n%% all to evaluate the function body and find the currect declaration).\r\nget_indexed_fun_form(FunForm, I) ->\r\n  [{clause,_,[],[],Body}] = FunForm,\r\n  As = lists:foldl(fun({_,_,_,A={'fun',_,_}}, Acc) -> Acc++[A]; %% assigned\r\n                      ({_,_,_,As}, Acc) when is_list(As) ->     %% argument\r\n                       Acc++[A || A={'fun',_,_} <- As];\r\n                      (_, Acc) -> Acc                           %% none\r\n                   end, [], Body),\r\n  [lists:nth(I+1, As)].\r\n\r\n%% @doc Convert a closure name like '-print_fun_test/0-fun-0-' into a fun name\r\n%% like 'print_fun_test' by looking it up in the module's beam code. Pattern\r\n%% follows the string creation of compiled fun names as defined in\r\n%% compiler/sys_pre_expand:new_fun_name/1.\r\nclosure_name_to_fun_location(Closure, _A) ->\r\n  Closure2 = erlang:atom_to_list(Closure),\r\n  Pattern = \"^-(.*)/([0-9]+)-fun-([0-9+])-$\",\r\n  {match, [_,F,A,I]} = re:run(Closure2, Pattern, [{capture, all, list}]),\r\n  {erlang:list_to_atom(F),erlang:list_to_integer(A),erlang:list_to_integer(I)}.\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% Tests\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n-ifdef(TEST).\r\n\r\nprint_fun_test() ->\r\n  io:format(\"@@@ Test: String~n\"),\r\n  print_fun(\"fun() -> foo end.\"),\r\n  \r\n  io:format(\"@@@ Test: Remote compiled~n\"),\r\n  print_fun(fun erlang:nodes/0),\r\n  \r\n  io:format(\"@@@ Test: Local compiled~n\"),\r\n  print_fun(fun() -> foo end),\r\n  \r\n  io:format(\"@@@ Test: Local interpreted~n\"),\r\n  io:format(\"Need to run interactively.~n\"),\r\n  %% print_fun(fun() -> foo end),\r\n  \r\n  io:format(\"@@@ Test: Shell~n\"),\r\n  io:format(\"Need to run interactively.~n\"),\r\n  print_fun(),\r\n  ok.\r\n\r\n-endif.\r\n","author":"uwe","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">  1</span> <span class=\"c\">%%% @doc Get the interpreted source code of a given fun in any given form.</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">  2</span> <span class=\"c\">%%% @copyright 2011 Klarna AB</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">  3</span> <span class=\"c\">%%% @author Uwe Dauernheim &lt;uwe@klarna.com&gt;</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\">  4</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">fun_to_source</span><span class=\"p\">).</span>\n<a name=\"linum-5\"></a><span class=\"lineno\">  5</span> \n<a name=\"linum-6\"></a><span class=\"lineno special\">  6</span> <span class=\"p\">-</span><span class=\"ni\">author</span><span class=\"p\">(</span><span class=\"s\">&quot;Uwe Dauernheim &lt;uwe@klarna.com&gt;&quot;</span><span class=\"p\">).</span>\n<a name=\"linum-7\"></a><span class=\"lineno\">  7</span> \n<a name=\"linum-8\"></a><span class=\"lineno special\">  8</span> <span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span> <span class=\"n\">print_fun</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n<a name=\"linum-9\"></a><span class=\"lineno\">  9</span>         <span class=\"p\">,</span> <span class=\"n\">print_fun</span><span class=\"o\">/</span><span class=\"mi\">1</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\"> 10</span>         <span class=\"p\">]).</span>\n<a name=\"linum-11\"></a><span class=\"lineno\"> 11</span> \n<a name=\"linum-12\"></a><span class=\"lineno special\"> 12</span> <span class=\"p\">-</span><span class=\"ni\">include_lib</span><span class=\"p\">(</span><span class=\"s\">&quot;eunit/include/eunit.hrl&quot;</span><span class=\"p\">).</span>\n<a name=\"linum-13\"></a><span class=\"lineno\"> 13</span> \n<a name=\"linum-14\"></a><span class=\"lineno special\"> 14</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-15\"></a><span class=\"lineno\"> 15</span> <span class=\"c\">%%% API</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\"> 16</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-17\"></a><span class=\"lineno\"> 17</span> \n<a name=\"linum-18\"></a><span class=\"lineno special\"> 18</span> <span class=\"c\">%% @doc We want to have a set of instructions encapsulated into a thunk:</span>\n<a name=\"linum-19\"></a><span class=\"lineno\"> 19</span> <span class=\"c\">%%   Instructions = ...,</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\"> 20</span> <span class=\"c\">%%   Fun = {&#39;fun&#39;,1,{clauses,Instructions}}.</span>\n<a name=\"linum-21\"></a><span class=\"lineno\"> 21</span> <span class=\"c\">%% And then output this thunk as a human-readable string:</span>\n<a name=\"linum-22\"></a><span class=\"lineno special\"> 22</span> <span class=\"c\">%%   fun() -&gt; ... end</span>\n<a name=\"linum-23\"></a><span class=\"lineno\"> 23</span> <span class=\"nf\">print_fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-24\"></a><span class=\"lineno special\"> 24</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">parse_erl_exprs</span><span class=\"p\">(</span><span class=\"n\">&#39;fun-shell&gt; &#39;</span><span class=\"p\">),</span>\n<a name=\"linum-25\"></a><span class=\"lineno\"> 25</span>   <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">).</span>\n<a name=\"linum-26\"></a><span class=\"lineno special\"> 26</span> \n<a name=\"linum-27\"></a><span class=\"lineno\"> 27</span> <span class=\"nf\">print_fun</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-28\"></a><span class=\"lineno special\"> 28</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Tokens</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">erl_scan</span><span class=\"p\">:</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">),</span>\n<a name=\"linum-29\"></a><span class=\"lineno\"> 29</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">}</span>     <span class=\"o\">=</span> <span class=\"nn\">erl_parse</span><span class=\"p\">:</span><span class=\"n\">parse_exprs</span><span class=\"p\">(</span><span class=\"nv\">Tokens</span><span class=\"p\">),</span>\n<a name=\"linum-30\"></a><span class=\"lineno special\"> 30</span>   <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">);</span>\n<a name=\"linum-31\"></a><span class=\"lineno\"> 31</span> <span class=\"nf\">print_fun</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_function</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-32\"></a><span class=\"lineno special\"> 32</span>   <span class=\"nv\">FunInfo</span> <span class=\"o\">=</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">fun_info</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">),</span>\n<a name=\"linum-33\"></a><span class=\"lineno\"> 33</span>   <span class=\"nv\">Type</span> <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span>   <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-34\"></a><span class=\"lineno special\"> 34</span>   <span class=\"nv\">Env</span>  <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span>    <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-35\"></a><span class=\"lineno\"> 35</span>   <span class=\"nv\">M</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-36\"></a><span class=\"lineno special\"> 36</span>   <span class=\"nv\">F</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span>   <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-37\"></a><span class=\"lineno\"> 37</span>   <span class=\"nv\">A</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">arity</span><span class=\"p\">,</span>  <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-38\"></a><span class=\"lineno special\"> 38</span>   <span class=\"k\">case</span> <span class=\"nv\">Type</span> <span class=\"k\">of</span>\n<a name=\"linum-39\"></a><span class=\"lineno\"> 39</span>     <span class=\"n\">external</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-40\"></a><span class=\"lineno special\"> 40</span>       <span class=\"k\">try</span>\n<a name=\"linum-41\"></a><span class=\"lineno\"> 41</span>         <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"n\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-42\"></a><span class=\"lineno special\"> 42</span>         <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span>\n<a name=\"linum-43\"></a><span class=\"lineno\"> 43</span>       <span class=\"k\">catch</span> <span class=\"nv\">T</span><span class=\"p\">:</span><span class=\"nv\">R</span> <span class=\"o\">-&gt;</span> <span class=\"n\">throw</span><span class=\"p\">({</span><span class=\"nv\">T</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">})</span>\n<a name=\"linum-44\"></a><span class=\"lineno special\"> 44</span>       <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-45\"></a><span class=\"lineno\"> 45</span>     <span class=\"n\">local</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-46\"></a><span class=\"lineno special\"> 46</span>       <span class=\"k\">case</span> <span class=\"nv\">Env</span> <span class=\"k\">of</span>\n<a name=\"linum-47\"></a><span class=\"lineno\"> 47</span>         <span class=\"p\">[]</span>  <span class=\"o\">-&gt;</span>\n<a name=\"linum-48\"></a><span class=\"lineno special\"> 48</span>           <span class=\"p\">{</span><span class=\"nv\">F2</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">,</span><span class=\"nv\">I</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">closure_name_to_fun_location</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-49\"></a><span class=\"lineno\"> 49</span>           <span class=\"k\">try</span>\n<a name=\"linum-50\"></a><span class=\"lineno special\"> 50</span>             <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"n\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F2</span><span class=\"p\">,</span> <span class=\"nv\">A2</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">),</span>\n<a name=\"linum-51\"></a><span class=\"lineno\"> 51</span>             <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">);</span>\n<a name=\"linum-52\"></a><span class=\"lineno special\"> 52</span>           <span class=\"k\">catch</span> <span class=\"nv\">T</span><span class=\"p\">:</span><span class=\"nv\">R</span> <span class=\"o\">-&gt;</span> <span class=\"n\">throw</span><span class=\"p\">({</span><span class=\"nv\">T</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">})</span>\n<a name=\"linum-53\"></a><span class=\"lineno\"> 53</span>           <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-54\"></a><span class=\"lineno special\"> 54</span>         <span class=\"nv\">Env</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-55\"></a><span class=\"lineno\"> 55</span>           <span class=\"p\">[[],_,_,</span><span class=\"nv\">Form0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nv\">Env</span><span class=\"p\">,</span>\n<a name=\"linum-56\"></a><span class=\"lineno special\"> 56</span>           <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,{</span><span class=\"n\">clauses</span><span class=\"p\">,</span><span class=\"nv\">Form0</span><span class=\"p\">}}],</span> <span class=\"c\">%% Add a default fun header</span>\n<a name=\"linum-57\"></a><span class=\"lineno\"> 57</span>           <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span>\n<a name=\"linum-58\"></a><span class=\"lineno special\"> 58</span>       <span class=\"k\">end</span>\n<a name=\"linum-59\"></a><span class=\"lineno\"> 59</span>   <span class=\"k\">end</span><span class=\"p\">.</span>\n<a name=\"linum-60\"></a><span class=\"lineno special\"> 60</span> \n<a name=\"linum-61\"></a><span class=\"lineno\"> 61</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-62\"></a><span class=\"lineno special\"> 62</span> <span class=\"c\">%%% Internals</span>\n<a name=\"linum-63\"></a><span class=\"lineno\"> 63</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-64\"></a><span class=\"lineno special\"> 64</span> \n<a name=\"linum-65\"></a><span class=\"lineno\"> 65</span> <span class=\"c\">%% @doc Take an AST form and print it as a source code string.</span>\n<a name=\"linum-66\"></a><span class=\"lineno special\"> 66</span> <span class=\"nf\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-67\"></a><span class=\"lineno\"> 67</span>   <span class=\"nv\">Source</span> <span class=\"o\">=</span> <span class=\"n\">convert_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">),</span>\n<a name=\"linum-68\"></a><span class=\"lineno special\"> 68</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"si\">~s~n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Source</span><span class=\"p\">]).</span>\n<a name=\"linum-69\"></a><span class=\"lineno\"> 69</span>   \n<a name=\"linum-70\"></a><span class=\"lineno special\"> 70</span> <span class=\"c\">%% @doc Take an AST form and converts it into a source code string.</span>\n<a name=\"linum-71\"></a><span class=\"lineno\"> 71</span> <span class=\"nf\">convert_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-72\"></a><span class=\"lineno special\"> 72</span>   <span class=\"nv\">Syntax</span> <span class=\"o\">=</span> <span class=\"nn\">erl_syntax</span><span class=\"p\">:</span><span class=\"n\">form_list</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">),</span>\n<a name=\"linum-73\"></a><span class=\"lineno\"> 73</span>   <span class=\"nn\">erl_prettypr</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nv\">Syntax</span><span class=\"p\">).</span>\n<a name=\"linum-74\"></a><span class=\"lineno special\"> 74</span>   \n<a name=\"linum-75\"></a><span class=\"lineno\"> 75</span> <span class=\"nf\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-76\"></a><span class=\"lineno special\"> 76</span>   <span class=\"nv\">AC</span> <span class=\"o\">=</span> <span class=\"n\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span>\n<a name=\"linum-77\"></a><span class=\"lineno\"> 77</span>   <span class=\"n\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">).</span>\n<a name=\"linum-78\"></a><span class=\"lineno special\"> 78</span> \n<a name=\"linum-79\"></a><span class=\"lineno\"> 79</span> <span class=\"nf\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-80\"></a><span class=\"lineno special\"> 80</span>   <span class=\"nv\">AC</span> <span class=\"o\">=</span> <span class=\"n\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span>\n<a name=\"linum-81\"></a><span class=\"lineno\"> 81</span>   <span class=\"nv\">FunForm</span> <span class=\"o\">=</span> <span class=\"n\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-82\"></a><span class=\"lineno special\"> 82</span>   <span class=\"n\">get_indexed_fun_form</span><span class=\"p\">(</span><span class=\"nv\">FunForm</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">).</span>\n<a name=\"linum-83\"></a><span class=\"lineno\"> 83</span> \n<a name=\"linum-84\"></a><span class=\"lineno special\"> 84</span> <span class=\"nf\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">Module</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-85\"></a><span class=\"lineno\"> 85</span>   <span class=\"nv\">BeamFile</span> <span class=\"o\">=</span> <span class=\"nn\">code</span><span class=\"p\">:</span><span class=\"n\">which</span><span class=\"p\">(</span><span class=\"nv\">Module</span><span class=\"p\">),</span>\n<a name=\"linum-86\"></a><span class=\"lineno special\"> 86</span>   <span class=\"nv\">AbstractCode</span> <span class=\"o\">=</span> <span class=\"nn\">beam_lib</span><span class=\"p\">:</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"nv\">BeamFile</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">abstract_code</span><span class=\"p\">]),</span>\n<a name=\"linum-87\"></a><span class=\"lineno\"> 87</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,{</span><span class=\"nv\">Module</span><span class=\"p\">,[{</span><span class=\"n\">abstract_code</span><span class=\"p\">,{</span><span class=\"n\">raw_abstract_v1</span><span class=\"p\">,</span><span class=\"nv\">AC</span><span class=\"p\">}}]}}</span> <span class=\"o\">=</span> <span class=\"nv\">AbstractCode</span><span class=\"p\">,</span>\n<a name=\"linum-88\"></a><span class=\"lineno special\"> 88</span>   <span class=\"nv\">AC</span><span class=\"p\">.</span>\n<a name=\"linum-89\"></a><span class=\"lineno\"> 89</span> \n<a name=\"linum-90\"></a><span class=\"lineno special\"> 90</span> <span class=\"nf\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-91\"></a><span class=\"lineno\"> 91</span>   <span class=\"p\">[</span><span class=\"nv\">Form2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">Form</span> <span class=\"p\">||</span> <span class=\"p\">{</span><span class=\"n\">function</span><span class=\"p\">,_,</span><span class=\"nv\">F0</span><span class=\"p\">,</span><span class=\"nv\">A0</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F0</span> <span class=\"o\">=</span><span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A0</span> <span class=\"o\">=</span><span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"nv\">A</span><span class=\"p\">],</span>\n<a name=\"linum-92\"></a><span class=\"lineno special\"> 92</span>   <span class=\"nv\">Form2</span><span class=\"p\">.</span>\n<a name=\"linum-93\"></a><span class=\"lineno\"> 93</span> \n<a name=\"linum-94\"></a><span class=\"lineno special\"> 94</span> <span class=\"c\">%% @doc This needs big improvements to be more generalized (if it is possible at</span>\n<a name=\"linum-95\"></a><span class=\"lineno\"> 95</span> <span class=\"c\">%% all to evaluate the function body and find the currect declaration).</span>\n<a name=\"linum-96\"></a><span class=\"lineno special\"> 96</span> <span class=\"nf\">get_indexed_fun_form</span><span class=\"p\">(</span><span class=\"nv\">FunForm</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-97\"></a><span class=\"lineno\"> 97</span>   <span class=\"p\">[{</span><span class=\"n\">clause</span><span class=\"p\">,_,[],[],</span><span class=\"nv\">Body</span><span class=\"p\">}]</span> <span class=\"o\">=</span> <span class=\"nv\">FunForm</span><span class=\"p\">,</span>\n<a name=\"linum-98\"></a><span class=\"lineno special\"> 98</span>   <span class=\"nv\">As</span> <span class=\"o\">=</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldl</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">({_,_,_,</span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,_,_}},</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">];</span> <span class=\"c\">%% assigned</span>\n<a name=\"linum-99\"></a><span class=\"lineno\"> 99</span>                       <span class=\"p\">({_,_,_,</span><span class=\"nv\">As</span><span class=\"p\">},</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">As</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>     <span class=\"c\">%% argument</span>\n<a name=\"linum-100\"></a><span class=\"lineno special\">100</span>                        <span class=\"nv\">Acc</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">A</span> <span class=\"p\">||</span> <span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,_,_}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">As</span><span class=\"p\">];</span>\n<a name=\"linum-101\"></a><span class=\"lineno\">101</span>                       <span class=\"p\">(_,</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span>                           <span class=\"c\">%% none</span>\n<a name=\"linum-102\"></a><span class=\"lineno special\">102</span>                    <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"nv\">Body</span><span class=\"p\">),</span>\n<a name=\"linum-103\"></a><span class=\"lineno\">103</span>   <span class=\"p\">[</span><span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">As</span><span class=\"p\">)].</span>\n<a name=\"linum-104\"></a><span class=\"lineno special\">104</span> \n<a name=\"linum-105\"></a><span class=\"lineno\">105</span> <span class=\"c\">%% @doc Convert a closure name like &#39;-print_fun_test/0-fun-0-&#39; into a fun name</span>\n<a name=\"linum-106\"></a><span class=\"lineno special\">106</span> <span class=\"c\">%% like &#39;print_fun_test&#39; by looking it up in the module&#39;s beam code. Pattern</span>\n<a name=\"linum-107\"></a><span class=\"lineno\">107</span> <span class=\"c\">%% follows the string creation of compiled fun names as defined in</span>\n<a name=\"linum-108\"></a><span class=\"lineno special\">108</span> <span class=\"c\">%% compiler/sys_pre_expand:new_fun_name/1.</span>\n<a name=\"linum-109\"></a><span class=\"lineno\">109</span> <span class=\"nf\">closure_name_to_fun_location</span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-110\"></a><span class=\"lineno special\">110</span>   <span class=\"nv\">Closure2</span> <span class=\"o\">=</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">atom_to_list</span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"p\">),</span>\n<a name=\"linum-111\"></a><span class=\"lineno\">111</span>   <span class=\"nv\">Pattern</span> <span class=\"o\">=</span> <span class=\"s\">&quot;^-(.*)/([0-9]+)-fun-([0-9+])-$&quot;</span><span class=\"p\">,</span>\n<a name=\"linum-112\"></a><span class=\"lineno special\">112</span>   <span class=\"p\">{</span><span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"p\">[_,</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">I</span><span class=\"p\">]}</span> <span class=\"o\">=</span> <span class=\"nn\">re</span><span class=\"p\">:</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"nv\">Closure2</span><span class=\"p\">,</span> <span class=\"nv\">Pattern</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">capture</span><span class=\"p\">,</span> <span class=\"n\">all</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">}]),</span>\n<a name=\"linum-113\"></a><span class=\"lineno\">113</span>   <span class=\"p\">{</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_atom</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">),</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_integer</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">),</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_integer</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"p\">)}.</span>\n<a name=\"linum-114\"></a><span class=\"lineno special\">114</span> \n<a name=\"linum-115\"></a><span class=\"lineno\">115</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-116\"></a><span class=\"lineno special\">116</span> <span class=\"c\">%%% Tests</span>\n<a name=\"linum-117\"></a><span class=\"lineno\">117</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-118\"></a><span class=\"lineno special\">118</span> \n<a name=\"linum-119\"></a><span class=\"lineno\">119</span> <span class=\"p\">-</span><span class=\"ni\">ifdef</span><span class=\"p\">(</span><span class=\"nv\">TEST</span><span class=\"p\">).</span>\n<a name=\"linum-120\"></a><span class=\"lineno special\">120</span> \n<a name=\"linum-121\"></a><span class=\"lineno\">121</span> <span class=\"nf\">print_fun_test</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-122\"></a><span class=\"lineno special\">122</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: String</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-123\"></a><span class=\"lineno\">123</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"s\">&quot;fun() -&gt; foo end.&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-124\"></a><span class=\"lineno special\">124</span>   \n<a name=\"linum-125\"></a><span class=\"lineno\">125</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Remote compiled</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-126\"></a><span class=\"lineno special\">126</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">nodes</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<a name=\"linum-127\"></a><span class=\"lineno\">127</span>   \n<a name=\"linum-128\"></a><span class=\"lineno special\">128</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Local compiled</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-129\"></a><span class=\"lineno\">129</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">foo</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n<a name=\"linum-130\"></a><span class=\"lineno special\">130</span>   \n<a name=\"linum-131\"></a><span class=\"lineno\">131</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Local interpreted</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-132\"></a><span class=\"lineno special\">132</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;Need to run interactively.</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-133\"></a><span class=\"lineno\">133</span>   <span class=\"c\">%% print_fun(fun() -&gt; foo end),</span>\n<a name=\"linum-134\"></a><span class=\"lineno special\">134</span>   \n<a name=\"linum-135\"></a><span class=\"lineno\">135</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Shell</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-136\"></a><span class=\"lineno special\">136</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;Need to run interactively.</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-137\"></a><span class=\"lineno\">137</span>   <span class=\"n\">print_fun</span><span class=\"p\">(),</span>\n<a name=\"linum-138\"></a><span class=\"lineno special\">138</span>   <span class=\"n\">ok</span><span class=\"p\">.</span>\n<a name=\"linum-139\"></a><span class=\"lineno\">139</span> \n<a name=\"linum-140\"></a><span class=\"lineno special\">140</span> <span class=\"p\">-</span><span class=\"ni\">endif</span><span class=\"p\">.</span>\n</pre></div>\n","ctime":1305630790679,"id":"1378"}}
{"key":"1378","val":{"description":"Get the interpreted source code of a given fun in any given form.","filename":"fun_to_src.erl","language":"Erlang","code":"%%% @doc Get the interpreted source code of a given fun in any given form.\r\n%%% @copyright 2011 Klarna AB\r\n%%% @author Uwe Dauernheim <uwe@klarna.com>\r\n-module(fun_to_source).\r\n\r\n-author(\"Uwe Dauernheim <uwe@klarna.com>\").\r\n\r\n-export([ print_fun/0\r\n        , print_fun/1\r\n        ]).\r\n\r\n-include_lib(\"eunit/include/eunit.hrl\").\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% API\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n%% @doc We want to have a set of instructions encapsulated into a thunk:\r\n%%   Instructions = ...,\r\n%%   Fun = {'fun',1,{clauses,Instructions}}.\r\n%% And then output this thunk as a human-readable string:\r\n%%   fun() -> ... end\r\nprint_fun() ->\r\n  {ok,Form,_} = io:parse_erl_exprs('fun-shell> '),\r\n  print_form(Form).\r\n\r\nprint_fun(FunStr) when is_list(FunStr) ->\r\n  {ok,Tokens,_} = erl_scan:string(FunStr),\r\n  {ok,Form}     = erl_parse:parse_exprs(Tokens),\r\n  print_form(Form);\r\nprint_fun(Fun) when is_function(Fun) ->\r\n  FunInfo = erlang:fun_info(Fun),\r\n  Type = proplists:get_value(type,   FunInfo),\r\n  Env  = proplists:get_value(env,    FunInfo),\r\n  M    = proplists:get_value(module, FunInfo),\r\n  F    = proplists:get_value(name,   FunInfo),\r\n  A    = proplists:get_value(arity,  FunInfo),\r\n  case Type of\r\n    external ->\r\n      try\r\n        Form = find_fun(M, F, A),\r\n        print_form(Form)\r\n      catch T:R -> throw({T,R})\r\n      end;\r\n    local ->\r\n      case Env of\r\n        []  ->\r\n          {F2,A2,I} = closure_name_to_fun_location(F, A),\r\n          try\r\n            Form = find_fun(M, F2, A2, I),\r\n            print_form(Form);\r\n          catch T:R -> throw({T,R})\r\n          end;\r\n        Env ->\r\n          [[],_,_,Form0] = Env,\r\n          Form = [{'fun',1,{clauses,Form0}}], %% Add a default fun header\r\n          print_form(Form)\r\n      end\r\n  end.\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% Internals\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n%% @doc Take an AST form and print it as a source code string.\r\nprint_form(Form) ->\r\n  Source = convert_form(Form),\r\n  io:format(\"~s~n\", [Source]).\r\n  \r\n%% @doc Take an AST form and converts it into a source code string.\r\nconvert_form(Form) ->\r\n  Syntax = erl_syntax:form_list(Form),\r\n  erl_prettypr:format(Syntax).\r\n  \r\nfind_fun(M, F, A) ->\r\n  AC = get_ast(M),\r\n  get_fun_form(AC, F, A).\r\n\r\nfind_fun(M, F, A, I) ->\r\n  AC = get_ast(M),\r\n  FunForm = get_fun_form(AC, F, A),\r\n  get_indexed_fun_form(FunForm, I).\r\n\r\nget_ast(Module) ->\r\n  BeamFile = code:which(Module),\r\n  AbstractCode = beam_lib:chunks(BeamFile, [abstract_code]),\r\n  {ok,{Module,[{abstract_code,{raw_abstract_v1,AC}}]}} = AbstractCode,\r\n  AC.\r\n\r\nget_fun_form(AC, F, A) ->\r\n  [Form2] = [Form || {function,_,F0,A0,Form} <- AC, F0 =:= F, A0 =:= A],\r\n  Form2.\r\n\r\n%% @doc This needs big improvements to be more generalized (if it is possible at\r\n%% all to evaluate the function body and find the currect declaration).\r\nget_indexed_fun_form(FunForm, I) ->\r\n  [{clause,_,[],[],Body}] = FunForm,\r\n  As = lists:foldl(fun({_,_,_,A={'fun',_,_}}, Acc) -> Acc++[A]; %% assigned\r\n                      ({_,_,_,As}, Acc) when is_list(As) ->     %% argument\r\n                       Acc++[A || A={'fun',_,_} <- As];\r\n                      (_, Acc) -> Acc                           %% none\r\n                   end, [], Body),\r\n  [lists:nth(I+1, As)].\r\n\r\n%% @doc Convert a closure name like '-print_fun_test/0-fun-0-' into a fun name\r\n%% like 'print_fun_test' by looking it up in the module's beam code. Pattern\r\n%% follows the string creation of compiled fun names as defined in\r\n%% compiler/sys_pre_expand:new_fun_name/1.\r\nclosure_name_to_fun_location(Closure, _A) ->\r\n  Closure2 = erlang:atom_to_list(Closure),\r\n  Pattern = \"^-(.*)/([0-9]+)-fun-([0-9+])-$\",\r\n  {match, [_,F,A,I]} = re:run(Closure2, Pattern, [{capture, all, list}]),\r\n  {erlang:list_to_atom(F),erlang:list_to_integer(A),erlang:list_to_integer(I)}.\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% Tests\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n-ifdef(TEST).\r\n\r\nprint_fun_test() ->\r\n  io:format(\"@@@ Test: String~n\"),\r\n  print_fun(\"fun() -> foo end.\"),\r\n  \r\n  io:format(\"@@@ Test: Remote compiled~n\"),\r\n  print_fun(fun erlang:nodes/0),\r\n  \r\n  io:format(\"@@@ Test: Local compiled~n\"),\r\n  print_fun(fun() -> foo end),\r\n  \r\n  io:format(\"@@@ Test: Local interpreted~n\"),\r\n  io:format(\"Need to run interactively.~n\"),\r\n  %% print_fun(fun() -> foo end),\r\n  \r\n  io:format(\"@@@ Test: Shell~n\"),\r\n  io:format(\"Need to run interactively.~n\"),\r\n  print_fun(),\r\n  ok.\r\n\r\n-endif.\r\n","author":"uwe","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">  1</span> <span class=\"c\">%%% @doc Get the interpreted source code of a given fun in any given form.</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">  2</span> <span class=\"c\">%%% @copyright 2011 Klarna AB</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">  3</span> <span class=\"c\">%%% @author Uwe Dauernheim &lt;uwe@klarna.com&gt;</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\">  4</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">fun_to_source</span><span class=\"p\">).</span>\n<a name=\"linum-5\"></a><span class=\"lineno\">  5</span> \n<a name=\"linum-6\"></a><span class=\"lineno special\">  6</span> <span class=\"p\">-</span><span class=\"ni\">author</span><span class=\"p\">(</span><span class=\"s\">&quot;Uwe Dauernheim &lt;uwe@klarna.com&gt;&quot;</span><span class=\"p\">).</span>\n<a name=\"linum-7\"></a><span class=\"lineno\">  7</span> \n<a name=\"linum-8\"></a><span class=\"lineno special\">  8</span> <span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span> <span class=\"n\">print_fun</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n<a name=\"linum-9\"></a><span class=\"lineno\">  9</span>         <span class=\"p\">,</span> <span class=\"n\">print_fun</span><span class=\"o\">/</span><span class=\"mi\">1</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\"> 10</span>         <span class=\"p\">]).</span>\n<a name=\"linum-11\"></a><span class=\"lineno\"> 11</span> \n<a name=\"linum-12\"></a><span class=\"lineno special\"> 12</span> <span class=\"p\">-</span><span class=\"ni\">include_lib</span><span class=\"p\">(</span><span class=\"s\">&quot;eunit/include/eunit.hrl&quot;</span><span class=\"p\">).</span>\n<a name=\"linum-13\"></a><span class=\"lineno\"> 13</span> \n<a name=\"linum-14\"></a><span class=\"lineno special\"> 14</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-15\"></a><span class=\"lineno\"> 15</span> <span class=\"c\">%%% API</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\"> 16</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-17\"></a><span class=\"lineno\"> 17</span> \n<a name=\"linum-18\"></a><span class=\"lineno special\"> 18</span> <span class=\"c\">%% @doc We want to have a set of instructions encapsulated into a thunk:</span>\n<a name=\"linum-19\"></a><span class=\"lineno\"> 19</span> <span class=\"c\">%%   Instructions = ...,</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\"> 20</span> <span class=\"c\">%%   Fun = {&#39;fun&#39;,1,{clauses,Instructions}}.</span>\n<a name=\"linum-21\"></a><span class=\"lineno\"> 21</span> <span class=\"c\">%% And then output this thunk as a human-readable string:</span>\n<a name=\"linum-22\"></a><span class=\"lineno special\"> 22</span> <span class=\"c\">%%   fun() -&gt; ... end</span>\n<a name=\"linum-23\"></a><span class=\"lineno\"> 23</span> <span class=\"nf\">print_fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-24\"></a><span class=\"lineno special\"> 24</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">parse_erl_exprs</span><span class=\"p\">(</span><span class=\"n\">&#39;fun-shell&gt; &#39;</span><span class=\"p\">),</span>\n<a name=\"linum-25\"></a><span class=\"lineno\"> 25</span>   <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">).</span>\n<a name=\"linum-26\"></a><span class=\"lineno special\"> 26</span> \n<a name=\"linum-27\"></a><span class=\"lineno\"> 27</span> <span class=\"nf\">print_fun</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-28\"></a><span class=\"lineno special\"> 28</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Tokens</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">erl_scan</span><span class=\"p\">:</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">),</span>\n<a name=\"linum-29\"></a><span class=\"lineno\"> 29</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">}</span>     <span class=\"o\">=</span> <span class=\"nn\">erl_parse</span><span class=\"p\">:</span><span class=\"n\">parse_exprs</span><span class=\"p\">(</span><span class=\"nv\">Tokens</span><span class=\"p\">),</span>\n<a name=\"linum-30\"></a><span class=\"lineno special\"> 30</span>   <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">);</span>\n<a name=\"linum-31\"></a><span class=\"lineno\"> 31</span> <span class=\"nf\">print_fun</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_function</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-32\"></a><span class=\"lineno special\"> 32</span>   <span class=\"nv\">FunInfo</span> <span class=\"o\">=</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">fun_info</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">),</span>\n<a name=\"linum-33\"></a><span class=\"lineno\"> 33</span>   <span class=\"nv\">Type</span> <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span>   <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-34\"></a><span class=\"lineno special\"> 34</span>   <span class=\"nv\">Env</span>  <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span>    <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-35\"></a><span class=\"lineno\"> 35</span>   <span class=\"nv\">M</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-36\"></a><span class=\"lineno special\"> 36</span>   <span class=\"nv\">F</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span>   <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-37\"></a><span class=\"lineno\"> 37</span>   <span class=\"nv\">A</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">arity</span><span class=\"p\">,</span>  <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-38\"></a><span class=\"lineno special\"> 38</span>   <span class=\"k\">case</span> <span class=\"nv\">Type</span> <span class=\"k\">of</span>\n<a name=\"linum-39\"></a><span class=\"lineno\"> 39</span>     <span class=\"n\">external</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-40\"></a><span class=\"lineno special\"> 40</span>       <span class=\"k\">try</span>\n<a name=\"linum-41\"></a><span class=\"lineno\"> 41</span>         <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"n\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-42\"></a><span class=\"lineno special\"> 42</span>         <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span>\n<a name=\"linum-43\"></a><span class=\"lineno\"> 43</span>       <span class=\"k\">catch</span> <span class=\"nv\">T</span><span class=\"p\">:</span><span class=\"nv\">R</span> <span class=\"o\">-&gt;</span> <span class=\"n\">throw</span><span class=\"p\">({</span><span class=\"nv\">T</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">})</span>\n<a name=\"linum-44\"></a><span class=\"lineno special\"> 44</span>       <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-45\"></a><span class=\"lineno\"> 45</span>     <span class=\"n\">local</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-46\"></a><span class=\"lineno special\"> 46</span>       <span class=\"k\">case</span> <span class=\"nv\">Env</span> <span class=\"k\">of</span>\n<a name=\"linum-47\"></a><span class=\"lineno\"> 47</span>         <span class=\"p\">[]</span>  <span class=\"o\">-&gt;</span>\n<a name=\"linum-48\"></a><span class=\"lineno special\"> 48</span>           <span class=\"p\">{</span><span class=\"nv\">F2</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">,</span><span class=\"nv\">I</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">closure_name_to_fun_location</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-49\"></a><span class=\"lineno\"> 49</span>           <span class=\"k\">try</span>\n<a name=\"linum-50\"></a><span class=\"lineno special\"> 50</span>             <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"n\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F2</span><span class=\"p\">,</span> <span class=\"nv\">A2</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">),</span>\n<a name=\"linum-51\"></a><span class=\"lineno\"> 51</span>             <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">);</span>\n<a name=\"linum-52\"></a><span class=\"lineno special\"> 52</span>           <span class=\"k\">catch</span> <span class=\"nv\">T</span><span class=\"p\">:</span><span class=\"nv\">R</span> <span class=\"o\">-&gt;</span> <span class=\"n\">throw</span><span class=\"p\">({</span><span class=\"nv\">T</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">})</span>\n<a name=\"linum-53\"></a><span class=\"lineno\"> 53</span>           <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-54\"></a><span class=\"lineno special\"> 54</span>         <span class=\"nv\">Env</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-55\"></a><span class=\"lineno\"> 55</span>           <span class=\"p\">[[],_,_,</span><span class=\"nv\">Form0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nv\">Env</span><span class=\"p\">,</span>\n<a name=\"linum-56\"></a><span class=\"lineno special\"> 56</span>           <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,{</span><span class=\"n\">clauses</span><span class=\"p\">,</span><span class=\"nv\">Form0</span><span class=\"p\">}}],</span> <span class=\"c\">%% Add a default fun header</span>\n<a name=\"linum-57\"></a><span class=\"lineno\"> 57</span>           <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span>\n<a name=\"linum-58\"></a><span class=\"lineno special\"> 58</span>       <span class=\"k\">end</span>\n<a name=\"linum-59\"></a><span class=\"lineno\"> 59</span>   <span class=\"k\">end</span><span class=\"p\">.</span>\n<a name=\"linum-60\"></a><span class=\"lineno special\"> 60</span> \n<a name=\"linum-61\"></a><span class=\"lineno\"> 61</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-62\"></a><span class=\"lineno special\"> 62</span> <span class=\"c\">%%% Internals</span>\n<a name=\"linum-63\"></a><span class=\"lineno\"> 63</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-64\"></a><span class=\"lineno special\"> 64</span> \n<a name=\"linum-65\"></a><span class=\"lineno\"> 65</span> <span class=\"c\">%% @doc Take an AST form and print it as a source code string.</span>\n<a name=\"linum-66\"></a><span class=\"lineno special\"> 66</span> <span class=\"nf\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-67\"></a><span class=\"lineno\"> 67</span>   <span class=\"nv\">Source</span> <span class=\"o\">=</span> <span class=\"n\">convert_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">),</span>\n<a name=\"linum-68\"></a><span class=\"lineno special\"> 68</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"si\">~s~n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Source</span><span class=\"p\">]).</span>\n<a name=\"linum-69\"></a><span class=\"lineno\"> 69</span>   \n<a name=\"linum-70\"></a><span class=\"lineno special\"> 70</span> <span class=\"c\">%% @doc Take an AST form and converts it into a source code string.</span>\n<a name=\"linum-71\"></a><span class=\"lineno\"> 71</span> <span class=\"nf\">convert_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-72\"></a><span class=\"lineno special\"> 72</span>   <span class=\"nv\">Syntax</span> <span class=\"o\">=</span> <span class=\"nn\">erl_syntax</span><span class=\"p\">:</span><span class=\"n\">form_list</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">),</span>\n<a name=\"linum-73\"></a><span class=\"lineno\"> 73</span>   <span class=\"nn\">erl_prettypr</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nv\">Syntax</span><span class=\"p\">).</span>\n<a name=\"linum-74\"></a><span class=\"lineno special\"> 74</span>   \n<a name=\"linum-75\"></a><span class=\"lineno\"> 75</span> <span class=\"nf\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-76\"></a><span class=\"lineno special\"> 76</span>   <span class=\"nv\">AC</span> <span class=\"o\">=</span> <span class=\"n\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span>\n<a name=\"linum-77\"></a><span class=\"lineno\"> 77</span>   <span class=\"n\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">).</span>\n<a name=\"linum-78\"></a><span class=\"lineno special\"> 78</span> \n<a name=\"linum-79\"></a><span class=\"lineno\"> 79</span> <span class=\"nf\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-80\"></a><span class=\"lineno special\"> 80</span>   <span class=\"nv\">AC</span> <span class=\"o\">=</span> <span class=\"n\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span>\n<a name=\"linum-81\"></a><span class=\"lineno\"> 81</span>   <span class=\"nv\">FunForm</span> <span class=\"o\">=</span> <span class=\"n\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-82\"></a><span class=\"lineno special\"> 82</span>   <span class=\"n\">get_indexed_fun_form</span><span class=\"p\">(</span><span class=\"nv\">FunForm</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">).</span>\n<a name=\"linum-83\"></a><span class=\"lineno\"> 83</span> \n<a name=\"linum-84\"></a><span class=\"lineno special\"> 84</span> <span class=\"nf\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">Module</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-85\"></a><span class=\"lineno\"> 85</span>   <span class=\"nv\">BeamFile</span> <span class=\"o\">=</span> <span class=\"nn\">code</span><span class=\"p\">:</span><span class=\"n\">which</span><span class=\"p\">(</span><span class=\"nv\">Module</span><span class=\"p\">),</span>\n<a name=\"linum-86\"></a><span class=\"lineno special\"> 86</span>   <span class=\"nv\">AbstractCode</span> <span class=\"o\">=</span> <span class=\"nn\">beam_lib</span><span class=\"p\">:</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"nv\">BeamFile</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">abstract_code</span><span class=\"p\">]),</span>\n<a name=\"linum-87\"></a><span class=\"lineno\"> 87</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,{</span><span class=\"nv\">Module</span><span class=\"p\">,[{</span><span class=\"n\">abstract_code</span><span class=\"p\">,{</span><span class=\"n\">raw_abstract_v1</span><span class=\"p\">,</span><span class=\"nv\">AC</span><span class=\"p\">}}]}}</span> <span class=\"o\">=</span> <span class=\"nv\">AbstractCode</span><span class=\"p\">,</span>\n<a name=\"linum-88\"></a><span class=\"lineno special\"> 88</span>   <span class=\"nv\">AC</span><span class=\"p\">.</span>\n<a name=\"linum-89\"></a><span class=\"lineno\"> 89</span> \n<a name=\"linum-90\"></a><span class=\"lineno special\"> 90</span> <span class=\"nf\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-91\"></a><span class=\"lineno\"> 91</span>   <span class=\"p\">[</span><span class=\"nv\">Form2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">Form</span> <span class=\"p\">||</span> <span class=\"p\">{</span><span class=\"n\">function</span><span class=\"p\">,_,</span><span class=\"nv\">F0</span><span class=\"p\">,</span><span class=\"nv\">A0</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F0</span> <span class=\"o\">=</span><span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A0</span> <span class=\"o\">=</span><span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"nv\">A</span><span class=\"p\">],</span>\n<a name=\"linum-92\"></a><span class=\"lineno special\"> 92</span>   <span class=\"nv\">Form2</span><span class=\"p\">.</span>\n<a name=\"linum-93\"></a><span class=\"lineno\"> 93</span> \n<a name=\"linum-94\"></a><span class=\"lineno special\"> 94</span> <span class=\"c\">%% @doc This needs big improvements to be more generalized (if it is possible at</span>\n<a name=\"linum-95\"></a><span class=\"lineno\"> 95</span> <span class=\"c\">%% all to evaluate the function body and find the currect declaration).</span>\n<a name=\"linum-96\"></a><span class=\"lineno special\"> 96</span> <span class=\"nf\">get_indexed_fun_form</span><span class=\"p\">(</span><span class=\"nv\">FunForm</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-97\"></a><span class=\"lineno\"> 97</span>   <span class=\"p\">[{</span><span class=\"n\">clause</span><span class=\"p\">,_,[],[],</span><span class=\"nv\">Body</span><span class=\"p\">}]</span> <span class=\"o\">=</span> <span class=\"nv\">FunForm</span><span class=\"p\">,</span>\n<a name=\"linum-98\"></a><span class=\"lineno special\"> 98</span>   <span class=\"nv\">As</span> <span class=\"o\">=</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldl</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">({_,_,_,</span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,_,_}},</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">];</span> <span class=\"c\">%% assigned</span>\n<a name=\"linum-99\"></a><span class=\"lineno\"> 99</span>                       <span class=\"p\">({_,_,_,</span><span class=\"nv\">As</span><span class=\"p\">},</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">As</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>     <span class=\"c\">%% argument</span>\n<a name=\"linum-100\"></a><span class=\"lineno special\">100</span>                        <span class=\"nv\">Acc</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">A</span> <span class=\"p\">||</span> <span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,_,_}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">As</span><span class=\"p\">];</span>\n<a name=\"linum-101\"></a><span class=\"lineno\">101</span>                       <span class=\"p\">(_,</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span>                           <span class=\"c\">%% none</span>\n<a name=\"linum-102\"></a><span class=\"lineno special\">102</span>                    <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"nv\">Body</span><span class=\"p\">),</span>\n<a name=\"linum-103\"></a><span class=\"lineno\">103</span>   <span class=\"p\">[</span><span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">As</span><span class=\"p\">)].</span>\n<a name=\"linum-104\"></a><span class=\"lineno special\">104</span> \n<a name=\"linum-105\"></a><span class=\"lineno\">105</span> <span class=\"c\">%% @doc Convert a closure name like &#39;-print_fun_test/0-fun-0-&#39; into a fun name</span>\n<a name=\"linum-106\"></a><span class=\"lineno special\">106</span> <span class=\"c\">%% like &#39;print_fun_test&#39; by looking it up in the module&#39;s beam code. Pattern</span>\n<a name=\"linum-107\"></a><span class=\"lineno\">107</span> <span class=\"c\">%% follows the string creation of compiled fun names as defined in</span>\n<a name=\"linum-108\"></a><span class=\"lineno special\">108</span> <span class=\"c\">%% compiler/sys_pre_expand:new_fun_name/1.</span>\n<a name=\"linum-109\"></a><span class=\"lineno\">109</span> <span class=\"nf\">closure_name_to_fun_location</span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-110\"></a><span class=\"lineno special\">110</span>   <span class=\"nv\">Closure2</span> <span class=\"o\">=</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">atom_to_list</span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"p\">),</span>\n<a name=\"linum-111\"></a><span class=\"lineno\">111</span>   <span class=\"nv\">Pattern</span> <span class=\"o\">=</span> <span class=\"s\">&quot;^-(.*)/([0-9]+)-fun-([0-9+])-$&quot;</span><span class=\"p\">,</span>\n<a name=\"linum-112\"></a><span class=\"lineno special\">112</span>   <span class=\"p\">{</span><span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"p\">[_,</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">I</span><span class=\"p\">]}</span> <span class=\"o\">=</span> <span class=\"nn\">re</span><span class=\"p\">:</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"nv\">Closure2</span><span class=\"p\">,</span> <span class=\"nv\">Pattern</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">capture</span><span class=\"p\">,</span> <span class=\"n\">all</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">}]),</span>\n<a name=\"linum-113\"></a><span class=\"lineno\">113</span>   <span class=\"p\">{</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_atom</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">),</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_integer</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">),</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_integer</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"p\">)}.</span>\n<a name=\"linum-114\"></a><span class=\"lineno special\">114</span> \n<a name=\"linum-115\"></a><span class=\"lineno\">115</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-116\"></a><span class=\"lineno special\">116</span> <span class=\"c\">%%% Tests</span>\n<a name=\"linum-117\"></a><span class=\"lineno\">117</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-118\"></a><span class=\"lineno special\">118</span> \n<a name=\"linum-119\"></a><span class=\"lineno\">119</span> <span class=\"p\">-</span><span class=\"ni\">ifdef</span><span class=\"p\">(</span><span class=\"nv\">TEST</span><span class=\"p\">).</span>\n<a name=\"linum-120\"></a><span class=\"lineno special\">120</span> \n<a name=\"linum-121\"></a><span class=\"lineno\">121</span> <span class=\"nf\">print_fun_test</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-122\"></a><span class=\"lineno special\">122</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: String</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-123\"></a><span class=\"lineno\">123</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"s\">&quot;fun() -&gt; foo end.&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-124\"></a><span class=\"lineno special\">124</span>   \n<a name=\"linum-125\"></a><span class=\"lineno\">125</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Remote compiled</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-126\"></a><span class=\"lineno special\">126</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">nodes</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<a name=\"linum-127\"></a><span class=\"lineno\">127</span>   \n<a name=\"linum-128\"></a><span class=\"lineno special\">128</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Local compiled</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-129\"></a><span class=\"lineno\">129</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">foo</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n<a name=\"linum-130\"></a><span class=\"lineno special\">130</span>   \n<a name=\"linum-131\"></a><span class=\"lineno\">131</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Local interpreted</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-132\"></a><span class=\"lineno special\">132</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;Need to run interactively.</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-133\"></a><span class=\"lineno\">133</span>   <span class=\"c\">%% print_fun(fun() -&gt; foo end),</span>\n<a name=\"linum-134\"></a><span class=\"lineno special\">134</span>   \n<a name=\"linum-135\"></a><span class=\"lineno\">135</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Shell</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-136\"></a><span class=\"lineno special\">136</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;Need to run interactively.</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-137\"></a><span class=\"lineno\">137</span>   <span class=\"n\">print_fun</span><span class=\"p\">(),</span>\n<a name=\"linum-138\"></a><span class=\"lineno special\">138</span>   <span class=\"n\">ok</span><span class=\"p\">.</span>\n<a name=\"linum-139\"></a><span class=\"lineno\">139</span> \n<a name=\"linum-140\"></a><span class=\"lineno special\">140</span> <span class=\"p\">-</span><span class=\"ni\">endif</span><span class=\"p\">.</span>\n</pre></div>\n","ctime":1305630790679,"id":"1378","archived":true}}
{"key":"2173","val":{"description":"Get the interpreted source code of a given fun in any given form.","filename":"fun_to_src.erl","language":"Erlang","code":"%%% @doc Get the interpreted source code of a given fun in any given form.\r\n%%% @copyright 2011 Klarna AB\r\n%%% @author Uwe Dauernheim <uwe@klarna.com>\r\n-module(fun_to_src).\r\n\r\n-author(\"Uwe Dauernheim <uwe@klarna.com>\").\r\n\r\n-export([ print_fun/0\r\n        , print_fun/1\r\n        ]).\r\n\r\n-include_lib(\"eunit/include/eunit.hrl\").\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% API\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n%% @doc We want to have a set of instructions encapsulated into a thunk:\r\n%%   Instructions = ...,\r\n%%   Fun = {'fun',1,{clauses,Instructions}}.\r\n%% And then output this thunk as a human-readable string:\r\n%%   fun() -> ... end\r\nprint_fun() ->\r\n  {ok,Form,_} = io:parse_erl_exprs('fun-shell> '),\r\n  print_form(Form).\r\n\r\nprint_fun(FunStr) when is_list(FunStr) ->\r\n  {ok,Tokens,_} = erl_scan:string(FunStr),\r\n  {ok,Form}     = erl_parse:parse_exprs(Tokens),\r\n  print_form(Form);\r\nprint_fun(Fun) when is_function(Fun) ->\r\n  FunInfo = erlang:fun_info(Fun),\r\n  Type = proplists:get_value(type,   FunInfo),\r\n  Env  = proplists:get_value(env,    FunInfo),\r\n  M    = proplists:get_value(module, FunInfo),\r\n  F    = proplists:get_value(name,   FunInfo),\r\n  A    = proplists:get_value(arity,  FunInfo),\r\n  case Type of\r\n    external ->\r\n      try\r\n        Form = find_fun(M, F, A),\r\n        print_form(Form)\r\n      catch T:R -> throw({T,R})\r\n      end;\r\n    local ->\r\n      case Env of\r\n        []  ->\r\n          {F2,A2,I} = closure_name_to_fun_location(F, A),\r\n          try\r\n            Form = find_fun(M, F2, A2, I),\r\n            print_form(Form);\r\n          catch T:R -> throw({T,R})\r\n          end;\r\n        Env ->\r\n          [[],_,_,Form0] = Env,\r\n          Form = [{'fun',1,{clauses,Form0}}], %% Add a default fun header\r\n          print_form(Form)\r\n      end\r\n  end.\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% Internals\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n%% @doc Take an AST form and print it as a source code string.\r\nprint_form(Form) ->\r\n  Source = convert_form(Form),\r\n  io:format(\"~s~n\", [Source]).\r\n  \r\n%% @doc Take an AST form and converts it into a source code string.\r\nconvert_form(Form) ->\r\n  Syntax = erl_syntax:form_list(Form),\r\n  erl_prettypr:format(Syntax).\r\n  \r\nfind_fun(M, F, A) ->\r\n  AC = get_ast(M),\r\n  get_fun_form(AC, F, A).\r\n\r\nfind_fun(M, F, A, I) ->\r\n  AC = get_ast(M),\r\n  FunForm = get_fun_form(AC, F, A),\r\n  get_indexed_fun_form(FunForm, I).\r\n\r\nget_ast(Module) ->\r\n  BeamFile = code:which(Module),\r\n  AbstractCode = beam_lib:chunks(BeamFile, [abstract_code]),\r\n  {ok,{Module,[{abstract_code,{raw_abstract_v1,AC}}]}} = AbstractCode,\r\n  AC.\r\n\r\nget_fun_form(AC, F, A) ->\r\n  [Form2] = [Form || {function,_,F0,A0,Form} <- AC, F0 =:= F, A0 =:= A],\r\n  Form2.\r\n\r\n%% @doc This needs big improvements to be more generalized (if it is possible at\r\n%% all to evaluate the function body and find the currect declaration).\r\nget_indexed_fun_form(FunForm, I) ->\r\n  [{clause,_,[],[],Body}] = FunForm,\r\n  As = lists:foldl(fun({_,_,_,A={'fun',_,_}}, Acc) -> Acc++[A]; %% assigned\r\n                      ({_,_,_,As}, Acc) when is_list(As) ->     %% argument\r\n                       Acc++[A || A={'fun',_,_} <- As];\r\n                      (_, Acc) -> Acc                           %% none\r\n                   end, [], Body),\r\n  [lists:nth(I+1, As)].\r\n\r\n%% @doc Convert a closure name like '-print_fun_test/0-fun-0-' into a fun name\r\n%% like 'print_fun_test' by looking it up in the module's beam code. Pattern\r\n%% follows the string creation of compiled fun names as defined in\r\n%% compiler/sys_pre_expand:new_fun_name/1.\r\nclosure_name_to_fun_location(Closure, _A) ->\r\n  Closure2 = erlang:atom_to_list(Closure),\r\n  Pattern = \"^-(.*)/([0-9]+)-fun-([0-9+])-$\",\r\n  {match, [_,F,A,I]} = re:run(Closure2, Pattern, [{capture, all, list}]),\r\n  {erlang:list_to_atom(F),erlang:list_to_integer(A),erlang:list_to_integer(I)}.\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%% Tests\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\n-ifdef(TEST).\r\n\r\nprint_fun_test() ->\r\n  io:format(\"@@@ Test: String~n\"),\r\n  print_fun(\"fun() -> foo end.\"),\r\n  \r\n  io:format(\"@@@ Test: Remote compiled~n\"),\r\n  print_fun(fun erlang:nodes/0),\r\n  \r\n  io:format(\"@@@ Test: Local compiled~n\"),\r\n  print_fun(fun() -> foo end),\r\n  \r\n  io:format(\"@@@ Test: Local interpreted~n\"),\r\n  io:format(\"Need to run interactively.~n\"),\r\n  %% print_fun(fun() -> foo end),\r\n  \r\n  io:format(\"@@@ Test: Shell~n\"),\r\n  io:format(\"Need to run interactively.~n\"),\r\n  print_fun(),\r\n  ok.\r\n\r\n-endif.","author":"uwe","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\">  1</span> <span class=\"c\">%%% @doc Get the interpreted source code of a given fun in any given form.</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\">  2</span> <span class=\"c\">%%% @copyright 2011 Klarna AB</span>\n<a name=\"linum-3\"></a><span class=\"lineno\">  3</span> <span class=\"c\">%%% @author Uwe Dauernheim &lt;uwe@klarna.com&gt;</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\">  4</span> <span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">fun_to_src</span><span class=\"p\">).</span>\n<a name=\"linum-5\"></a><span class=\"lineno\">  5</span> \n<a name=\"linum-6\"></a><span class=\"lineno special\">  6</span> <span class=\"p\">-</span><span class=\"ni\">author</span><span class=\"p\">(</span><span class=\"s\">&quot;Uwe Dauernheim &lt;uwe@klarna.com&gt;&quot;</span><span class=\"p\">).</span>\n<a name=\"linum-7\"></a><span class=\"lineno\">  7</span> \n<a name=\"linum-8\"></a><span class=\"lineno special\">  8</span> <span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span> <span class=\"n\">print_fun</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n<a name=\"linum-9\"></a><span class=\"lineno\">  9</span>         <span class=\"p\">,</span> <span class=\"n\">print_fun</span><span class=\"o\">/</span><span class=\"mi\">1</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\"> 10</span>         <span class=\"p\">]).</span>\n<a name=\"linum-11\"></a><span class=\"lineno\"> 11</span> \n<a name=\"linum-12\"></a><span class=\"lineno special\"> 12</span> <span class=\"p\">-</span><span class=\"ni\">include_lib</span><span class=\"p\">(</span><span class=\"s\">&quot;eunit/include/eunit.hrl&quot;</span><span class=\"p\">).</span>\n<a name=\"linum-13\"></a><span class=\"lineno\"> 13</span> \n<a name=\"linum-14\"></a><span class=\"lineno special\"> 14</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-15\"></a><span class=\"lineno\"> 15</span> <span class=\"c\">%%% API</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\"> 16</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-17\"></a><span class=\"lineno\"> 17</span> \n<a name=\"linum-18\"></a><span class=\"lineno special\"> 18</span> <span class=\"c\">%% @doc We want to have a set of instructions encapsulated into a thunk:</span>\n<a name=\"linum-19\"></a><span class=\"lineno\"> 19</span> <span class=\"c\">%%   Instructions = ...,</span>\n<a name=\"linum-20\"></a><span class=\"lineno special\"> 20</span> <span class=\"c\">%%   Fun = {&#39;fun&#39;,1,{clauses,Instructions}}.</span>\n<a name=\"linum-21\"></a><span class=\"lineno\"> 21</span> <span class=\"c\">%% And then output this thunk as a human-readable string:</span>\n<a name=\"linum-22\"></a><span class=\"lineno special\"> 22</span> <span class=\"c\">%%   fun() -&gt; ... end</span>\n<a name=\"linum-23\"></a><span class=\"lineno\"> 23</span> <span class=\"nf\">print_fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-24\"></a><span class=\"lineno special\"> 24</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">parse_erl_exprs</span><span class=\"p\">(</span><span class=\"n\">&#39;fun-shell&gt; &#39;</span><span class=\"p\">),</span>\n<a name=\"linum-25\"></a><span class=\"lineno\"> 25</span>   <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">).</span>\n<a name=\"linum-26\"></a><span class=\"lineno special\"> 26</span> \n<a name=\"linum-27\"></a><span class=\"lineno\"> 27</span> <span class=\"nf\">print_fun</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-28\"></a><span class=\"lineno special\"> 28</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Tokens</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">erl_scan</span><span class=\"p\">:</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"nv\">FunStr</span><span class=\"p\">),</span>\n<a name=\"linum-29\"></a><span class=\"lineno\"> 29</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">}</span>     <span class=\"o\">=</span> <span class=\"nn\">erl_parse</span><span class=\"p\">:</span><span class=\"n\">parse_exprs</span><span class=\"p\">(</span><span class=\"nv\">Tokens</span><span class=\"p\">),</span>\n<a name=\"linum-30\"></a><span class=\"lineno special\"> 30</span>   <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">);</span>\n<a name=\"linum-31\"></a><span class=\"lineno\"> 31</span> <span class=\"nf\">print_fun</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_function</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-32\"></a><span class=\"lineno special\"> 32</span>   <span class=\"nv\">FunInfo</span> <span class=\"o\">=</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">fun_info</span><span class=\"p\">(</span><span class=\"nv\">Fun</span><span class=\"p\">),</span>\n<a name=\"linum-33\"></a><span class=\"lineno\"> 33</span>   <span class=\"nv\">Type</span> <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span>   <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-34\"></a><span class=\"lineno special\"> 34</span>   <span class=\"nv\">Env</span>  <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span>    <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-35\"></a><span class=\"lineno\"> 35</span>   <span class=\"nv\">M</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-36\"></a><span class=\"lineno special\"> 36</span>   <span class=\"nv\">F</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span>   <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-37\"></a><span class=\"lineno\"> 37</span>   <span class=\"nv\">A</span>    <span class=\"o\">=</span> <span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">arity</span><span class=\"p\">,</span>  <span class=\"nv\">FunInfo</span><span class=\"p\">),</span>\n<a name=\"linum-38\"></a><span class=\"lineno special\"> 38</span>   <span class=\"k\">case</span> <span class=\"nv\">Type</span> <span class=\"k\">of</span>\n<a name=\"linum-39\"></a><span class=\"lineno\"> 39</span>     <span class=\"n\">external</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-40\"></a><span class=\"lineno special\"> 40</span>       <span class=\"k\">try</span>\n<a name=\"linum-41\"></a><span class=\"lineno\"> 41</span>         <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"n\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-42\"></a><span class=\"lineno special\"> 42</span>         <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span>\n<a name=\"linum-43\"></a><span class=\"lineno\"> 43</span>       <span class=\"k\">catch</span> <span class=\"nv\">T</span><span class=\"p\">:</span><span class=\"nv\">R</span> <span class=\"o\">-&gt;</span> <span class=\"n\">throw</span><span class=\"p\">({</span><span class=\"nv\">T</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">})</span>\n<a name=\"linum-44\"></a><span class=\"lineno special\"> 44</span>       <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-45\"></a><span class=\"lineno\"> 45</span>     <span class=\"n\">local</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-46\"></a><span class=\"lineno special\"> 46</span>       <span class=\"k\">case</span> <span class=\"nv\">Env</span> <span class=\"k\">of</span>\n<a name=\"linum-47\"></a><span class=\"lineno\"> 47</span>         <span class=\"p\">[]</span>  <span class=\"o\">-&gt;</span>\n<a name=\"linum-48\"></a><span class=\"lineno special\"> 48</span>           <span class=\"p\">{</span><span class=\"nv\">F2</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">,</span><span class=\"nv\">I</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">closure_name_to_fun_location</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-49\"></a><span class=\"lineno\"> 49</span>           <span class=\"k\">try</span>\n<a name=\"linum-50\"></a><span class=\"lineno special\"> 50</span>             <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"n\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F2</span><span class=\"p\">,</span> <span class=\"nv\">A2</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">),</span>\n<a name=\"linum-51\"></a><span class=\"lineno\"> 51</span>             <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">);</span>\n<a name=\"linum-52\"></a><span class=\"lineno special\"> 52</span>           <span class=\"k\">catch</span> <span class=\"nv\">T</span><span class=\"p\">:</span><span class=\"nv\">R</span> <span class=\"o\">-&gt;</span> <span class=\"n\">throw</span><span class=\"p\">({</span><span class=\"nv\">T</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">})</span>\n<a name=\"linum-53\"></a><span class=\"lineno\"> 53</span>           <span class=\"k\">end</span><span class=\"p\">;</span>\n<a name=\"linum-54\"></a><span class=\"lineno special\"> 54</span>         <span class=\"nv\">Env</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-55\"></a><span class=\"lineno\"> 55</span>           <span class=\"p\">[[],_,_,</span><span class=\"nv\">Form0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nv\">Env</span><span class=\"p\">,</span>\n<a name=\"linum-56\"></a><span class=\"lineno special\"> 56</span>           <span class=\"nv\">Form</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,{</span><span class=\"n\">clauses</span><span class=\"p\">,</span><span class=\"nv\">Form0</span><span class=\"p\">}}],</span> <span class=\"c\">%% Add a default fun header</span>\n<a name=\"linum-57\"></a><span class=\"lineno\"> 57</span>           <span class=\"n\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span>\n<a name=\"linum-58\"></a><span class=\"lineno special\"> 58</span>       <span class=\"k\">end</span>\n<a name=\"linum-59\"></a><span class=\"lineno\"> 59</span>   <span class=\"k\">end</span><span class=\"p\">.</span>\n<a name=\"linum-60\"></a><span class=\"lineno special\"> 60</span> \n<a name=\"linum-61\"></a><span class=\"lineno\"> 61</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-62\"></a><span class=\"lineno special\"> 62</span> <span class=\"c\">%%% Internals</span>\n<a name=\"linum-63\"></a><span class=\"lineno\"> 63</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-64\"></a><span class=\"lineno special\"> 64</span> \n<a name=\"linum-65\"></a><span class=\"lineno\"> 65</span> <span class=\"c\">%% @doc Take an AST form and print it as a source code string.</span>\n<a name=\"linum-66\"></a><span class=\"lineno special\"> 66</span> <span class=\"nf\">print_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-67\"></a><span class=\"lineno\"> 67</span>   <span class=\"nv\">Source</span> <span class=\"o\">=</span> <span class=\"n\">convert_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">),</span>\n<a name=\"linum-68\"></a><span class=\"lineno special\"> 68</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"si\">~s~n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Source</span><span class=\"p\">]).</span>\n<a name=\"linum-69\"></a><span class=\"lineno\"> 69</span>   \n<a name=\"linum-70\"></a><span class=\"lineno special\"> 70</span> <span class=\"c\">%% @doc Take an AST form and converts it into a source code string.</span>\n<a name=\"linum-71\"></a><span class=\"lineno\"> 71</span> <span class=\"nf\">convert_form</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-72\"></a><span class=\"lineno special\"> 72</span>   <span class=\"nv\">Syntax</span> <span class=\"o\">=</span> <span class=\"nn\">erl_syntax</span><span class=\"p\">:</span><span class=\"n\">form_list</span><span class=\"p\">(</span><span class=\"nv\">Form</span><span class=\"p\">),</span>\n<a name=\"linum-73\"></a><span class=\"lineno\"> 73</span>   <span class=\"nn\">erl_prettypr</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nv\">Syntax</span><span class=\"p\">).</span>\n<a name=\"linum-74\"></a><span class=\"lineno special\"> 74</span>   \n<a name=\"linum-75\"></a><span class=\"lineno\"> 75</span> <span class=\"nf\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-76\"></a><span class=\"lineno special\"> 76</span>   <span class=\"nv\">AC</span> <span class=\"o\">=</span> <span class=\"n\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span>\n<a name=\"linum-77\"></a><span class=\"lineno\"> 77</span>   <span class=\"n\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">).</span>\n<a name=\"linum-78\"></a><span class=\"lineno special\"> 78</span> \n<a name=\"linum-79\"></a><span class=\"lineno\"> 79</span> <span class=\"nf\">find_fun</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-80\"></a><span class=\"lineno special\"> 80</span>   <span class=\"nv\">AC</span> <span class=\"o\">=</span> <span class=\"n\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span>\n<a name=\"linum-81\"></a><span class=\"lineno\"> 81</span>   <span class=\"nv\">FunForm</span> <span class=\"o\">=</span> <span class=\"n\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">),</span>\n<a name=\"linum-82\"></a><span class=\"lineno special\"> 82</span>   <span class=\"n\">get_indexed_fun_form</span><span class=\"p\">(</span><span class=\"nv\">FunForm</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">).</span>\n<a name=\"linum-83\"></a><span class=\"lineno\"> 83</span> \n<a name=\"linum-84\"></a><span class=\"lineno special\"> 84</span> <span class=\"nf\">get_ast</span><span class=\"p\">(</span><span class=\"nv\">Module</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-85\"></a><span class=\"lineno\"> 85</span>   <span class=\"nv\">BeamFile</span> <span class=\"o\">=</span> <span class=\"nn\">code</span><span class=\"p\">:</span><span class=\"n\">which</span><span class=\"p\">(</span><span class=\"nv\">Module</span><span class=\"p\">),</span>\n<a name=\"linum-86\"></a><span class=\"lineno special\"> 86</span>   <span class=\"nv\">AbstractCode</span> <span class=\"o\">=</span> <span class=\"nn\">beam_lib</span><span class=\"p\">:</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"nv\">BeamFile</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">abstract_code</span><span class=\"p\">]),</span>\n<a name=\"linum-87\"></a><span class=\"lineno\"> 87</span>   <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,{</span><span class=\"nv\">Module</span><span class=\"p\">,[{</span><span class=\"n\">abstract_code</span><span class=\"p\">,{</span><span class=\"n\">raw_abstract_v1</span><span class=\"p\">,</span><span class=\"nv\">AC</span><span class=\"p\">}}]}}</span> <span class=\"o\">=</span> <span class=\"nv\">AbstractCode</span><span class=\"p\">,</span>\n<a name=\"linum-88\"></a><span class=\"lineno special\"> 88</span>   <span class=\"nv\">AC</span><span class=\"p\">.</span>\n<a name=\"linum-89\"></a><span class=\"lineno\"> 89</span> \n<a name=\"linum-90\"></a><span class=\"lineno special\"> 90</span> <span class=\"nf\">get_fun_form</span><span class=\"p\">(</span><span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-91\"></a><span class=\"lineno\"> 91</span>   <span class=\"p\">[</span><span class=\"nv\">Form2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">Form</span> <span class=\"p\">||</span> <span class=\"p\">{</span><span class=\"n\">function</span><span class=\"p\">,_,</span><span class=\"nv\">F0</span><span class=\"p\">,</span><span class=\"nv\">A0</span><span class=\"p\">,</span><span class=\"nv\">Form</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">AC</span><span class=\"p\">,</span> <span class=\"nv\">F0</span> <span class=\"o\">=</span><span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A0</span> <span class=\"o\">=</span><span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"nv\">A</span><span class=\"p\">],</span>\n<a name=\"linum-92\"></a><span class=\"lineno special\"> 92</span>   <span class=\"nv\">Form2</span><span class=\"p\">.</span>\n<a name=\"linum-93\"></a><span class=\"lineno\"> 93</span> \n<a name=\"linum-94\"></a><span class=\"lineno special\"> 94</span> <span class=\"c\">%% @doc This needs big improvements to be more generalized (if it is possible at</span>\n<a name=\"linum-95\"></a><span class=\"lineno\"> 95</span> <span class=\"c\">%% all to evaluate the function body and find the currect declaration).</span>\n<a name=\"linum-96\"></a><span class=\"lineno special\"> 96</span> <span class=\"nf\">get_indexed_fun_form</span><span class=\"p\">(</span><span class=\"nv\">FunForm</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-97\"></a><span class=\"lineno\"> 97</span>   <span class=\"p\">[{</span><span class=\"n\">clause</span><span class=\"p\">,_,[],[],</span><span class=\"nv\">Body</span><span class=\"p\">}]</span> <span class=\"o\">=</span> <span class=\"nv\">FunForm</span><span class=\"p\">,</span>\n<a name=\"linum-98\"></a><span class=\"lineno special\"> 98</span>   <span class=\"nv\">As</span> <span class=\"o\">=</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldl</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">({_,_,_,</span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,_,_}},</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">];</span> <span class=\"c\">%% assigned</span>\n<a name=\"linum-99\"></a><span class=\"lineno\"> 99</span>                       <span class=\"p\">({_,_,_,</span><span class=\"nv\">As</span><span class=\"p\">},</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">As</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>     <span class=\"c\">%% argument</span>\n<a name=\"linum-100\"></a><span class=\"lineno special\">100</span>                        <span class=\"nv\">Acc</span><span class=\"o\">++</span><span class=\"p\">[</span><span class=\"nv\">A</span> <span class=\"p\">||</span> <span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">&#39;fun&#39;</span><span class=\"p\">,_,_}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">As</span><span class=\"p\">];</span>\n<a name=\"linum-101\"></a><span class=\"lineno\">101</span>                       <span class=\"p\">(_,</span> <span class=\"nv\">Acc</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Acc</span>                           <span class=\"c\">%% none</span>\n<a name=\"linum-102\"></a><span class=\"lineno special\">102</span>                    <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"nv\">Body</span><span class=\"p\">),</span>\n<a name=\"linum-103\"></a><span class=\"lineno\">103</span>   <span class=\"p\">[</span><span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">As</span><span class=\"p\">)].</span>\n<a name=\"linum-104\"></a><span class=\"lineno special\">104</span> \n<a name=\"linum-105\"></a><span class=\"lineno\">105</span> <span class=\"c\">%% @doc Convert a closure name like &#39;-print_fun_test/0-fun-0-&#39; into a fun name</span>\n<a name=\"linum-106\"></a><span class=\"lineno special\">106</span> <span class=\"c\">%% like &#39;print_fun_test&#39; by looking it up in the module&#39;s beam code. Pattern</span>\n<a name=\"linum-107\"></a><span class=\"lineno\">107</span> <span class=\"c\">%% follows the string creation of compiled fun names as defined in</span>\n<a name=\"linum-108\"></a><span class=\"lineno special\">108</span> <span class=\"c\">%% compiler/sys_pre_expand:new_fun_name/1.</span>\n<a name=\"linum-109\"></a><span class=\"lineno\">109</span> <span class=\"nf\">closure_name_to_fun_location</span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-110\"></a><span class=\"lineno special\">110</span>   <span class=\"nv\">Closure2</span> <span class=\"o\">=</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">atom_to_list</span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"p\">),</span>\n<a name=\"linum-111\"></a><span class=\"lineno\">111</span>   <span class=\"nv\">Pattern</span> <span class=\"o\">=</span> <span class=\"s\">&quot;^-(.*)/([0-9]+)-fun-([0-9+])-$&quot;</span><span class=\"p\">,</span>\n<a name=\"linum-112\"></a><span class=\"lineno special\">112</span>   <span class=\"p\">{</span><span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"p\">[_,</span><span class=\"nv\">F</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">I</span><span class=\"p\">]}</span> <span class=\"o\">=</span> <span class=\"nn\">re</span><span class=\"p\">:</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"nv\">Closure2</span><span class=\"p\">,</span> <span class=\"nv\">Pattern</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">capture</span><span class=\"p\">,</span> <span class=\"n\">all</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">}]),</span>\n<a name=\"linum-113\"></a><span class=\"lineno\">113</span>   <span class=\"p\">{</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_atom</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">),</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_integer</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">),</span><span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">list_to_integer</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"p\">)}.</span>\n<a name=\"linum-114\"></a><span class=\"lineno special\">114</span> \n<a name=\"linum-115\"></a><span class=\"lineno\">115</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-116\"></a><span class=\"lineno special\">116</span> <span class=\"c\">%%% Tests</span>\n<a name=\"linum-117\"></a><span class=\"lineno\">117</span> <span class=\"c\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<a name=\"linum-118\"></a><span class=\"lineno special\">118</span> \n<a name=\"linum-119\"></a><span class=\"lineno\">119</span> <span class=\"p\">-</span><span class=\"ni\">ifdef</span><span class=\"p\">(</span><span class=\"nv\">TEST</span><span class=\"p\">).</span>\n<a name=\"linum-120\"></a><span class=\"lineno special\">120</span> \n<a name=\"linum-121\"></a><span class=\"lineno\">121</span> <span class=\"nf\">print_fun_test</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-122\"></a><span class=\"lineno special\">122</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: String</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-123\"></a><span class=\"lineno\">123</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"s\">&quot;fun() -&gt; foo end.&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-124\"></a><span class=\"lineno special\">124</span>   \n<a name=\"linum-125\"></a><span class=\"lineno\">125</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Remote compiled</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-126\"></a><span class=\"lineno special\">126</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">nodes</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<a name=\"linum-127\"></a><span class=\"lineno\">127</span>   \n<a name=\"linum-128\"></a><span class=\"lineno special\">128</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Local compiled</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-129\"></a><span class=\"lineno\">129</span>   <span class=\"n\">print_fun</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">foo</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n<a name=\"linum-130\"></a><span class=\"lineno special\">130</span>   \n<a name=\"linum-131\"></a><span class=\"lineno\">131</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Local interpreted</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-132\"></a><span class=\"lineno special\">132</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;Need to run interactively.</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-133\"></a><span class=\"lineno\">133</span>   <span class=\"c\">%% print_fun(fun() -&gt; foo end),</span>\n<a name=\"linum-134\"></a><span class=\"lineno special\">134</span>   \n<a name=\"linum-135\"></a><span class=\"lineno\">135</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;@@@ Test: Shell</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-136\"></a><span class=\"lineno special\">136</span>   <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;Need to run interactively.</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">),</span>\n<a name=\"linum-137\"></a><span class=\"lineno\">137</span>   <span class=\"n\">print_fun</span><span class=\"p\">(),</span>\n<a name=\"linum-138\"></a><span class=\"lineno special\">138</span>   <span class=\"n\">ok</span><span class=\"p\">.</span>\n<a name=\"linum-139\"></a><span class=\"lineno\">139</span> \n<a name=\"linum-140\"></a><span class=\"lineno special\">140</span> <span class=\"p\">-</span><span class=\"ni\">endif</span><span class=\"p\">.</span>\n</pre></div>\n","ctime":1305630847046,"id":"2173"}}
{"key":"4325","val":{"description":"Cut example of Erlando - Erlang language extension","filename":"erlando_ex1.erl","language":"Erlang","code":"%%% Among many examples, cut can help to write compact currying using pattern-match placeholder '_'\r\n\r\nwith_resource(Resource, Fun) ->\r\n  case lookup_resource(Resource) of\r\n    {ok, R}          -> Fun(R);\r\n    {error, _} = Err -> Err\r\n  end.\r\n\r\n%% Erlang\r\nmy_fun(A, B, C) ->\r\n  with_resource(A, fun (Resource) ->\r\n                       my_resource_modification(Resource, B, C)\r\n                   end).\r\n\r\n%% Erlando\r\nmy_fun(A, B, C) ->\r\n  with_resource(A, my_resource_modification(_, B, C)).","author":"uwe","expires":"","hl_code":"<div class=\"highlight\"><pre><a name=\"linum-1\"></a><span class=\"lineno\"> 1</span> <span class=\"c\">%%% Among many examples, cut can help to write compact currying using pattern-match placeholder &#39;_&#39;</span>\n<a name=\"linum-2\"></a><span class=\"lineno special\"> 2</span> \n<a name=\"linum-3\"></a><span class=\"lineno\"> 3</span> <span class=\"nf\">with_resource</span><span class=\"p\">(</span><span class=\"nv\">Resource</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-4\"></a><span class=\"lineno special\"> 4</span>   <span class=\"k\">case</span> <span class=\"n\">lookup_resource</span><span class=\"p\">(</span><span class=\"nv\">Resource</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n<a name=\"linum-5\"></a><span class=\"lineno\"> 5</span>     <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">R</span><span class=\"p\">}</span>          <span class=\"o\">-&gt;</span> <span class=\"nv\">Fun</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">);</span>\n<a name=\"linum-6\"></a><span class=\"lineno special\"> 6</span>     <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">=</span> <span class=\"nv\">Err</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">Err</span>\n<a name=\"linum-7\"></a><span class=\"lineno\"> 7</span>   <span class=\"k\">end</span><span class=\"p\">.</span>\n<a name=\"linum-8\"></a><span class=\"lineno special\"> 8</span> \n<a name=\"linum-9\"></a><span class=\"lineno\"> 9</span> <span class=\"c\">%% Erlang</span>\n<a name=\"linum-10\"></a><span class=\"lineno special\">10</span> <span class=\"nf\">my_fun</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-11\"></a><span class=\"lineno\">11</span>   <span class=\"n\">with_resource</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">Resource</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-12\"></a><span class=\"lineno special\">12</span>                        <span class=\"n\">my_resource_modification</span><span class=\"p\">(</span><span class=\"nv\">Resource</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">)</span>\n<a name=\"linum-13\"></a><span class=\"lineno\">13</span>                    <span class=\"k\">end</span><span class=\"p\">).</span>\n<a name=\"linum-14\"></a><span class=\"lineno special\">14</span> \n<a name=\"linum-15\"></a><span class=\"lineno\">15</span> <span class=\"c\">%% Erlando</span>\n<a name=\"linum-16\"></a><span class=\"lineno special\">16</span> <span class=\"nf\">my_fun</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n<a name=\"linum-17\"></a><span class=\"lineno\">17</span>   <span class=\"n\">with_resource</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"n\">my_resource_modification</span><span class=\"p\">(_,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">)).</span>\n</pre></div>\n","ctime":1305711442536,"id":"4325"}}
